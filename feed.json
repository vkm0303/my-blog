{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "AmsChan's Blog",
  "home_page_url": "https://amschen.cn/",
  "feed_url": "https://amschen.cn/feed.json",
  "author": {
    "name": "AmsChan"
  },
  "items": [
    {
      "title": "博客主页",
      "url": "https://amschen.cn/",
      "id": "https://amschen.cn/",
      "content_html": "",
      "date_modified": "2022-05-11T16:27:22.427Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": []
    },
    {
      "title": "解决小程序弹出层滑动穿透问题",
      "url": "https://amschen.cn/articles/2021-03-06/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%B9%E5%87%BA%E5%B1%82%E6%BB%91%E5%8A%A8%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98/",
      "id": "https://amschen.cn/articles/2021-03-06/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%B9%E5%87%BA%E5%B1%82%E6%BB%91%E5%8A%A8%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98/",
      "content_html": "<p>将商品添加购物车，打开购物车详情，在这一块区域滑动时，其底层会滑动，即滑动会穿透\n<img src=\"https://img-blog.csdnimg.cn/20210306131452324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5MDU1NA==,size_10,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p>在弹出层的上一级盒子添加catch:touchmove=&quot;preventMove&quot;，preventMove是一个空事件。</p>\n<div><pre><code><span>catch</span><span>:</span>touchmove<span>=</span><span>\"preventMove\"</span>\n\n<span>preventMove</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>问题解决！</p>\n",
      "image": "https://img-blog.csdnimg.cn/20210306131452324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5MDU1NA==,size_10,color_FFFFFF,t_70",
      "date_published": "2021-03-06T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.453Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "centOS 部署YApi api管理平台",
      "url": "https://amschen.cn/articles/2021-02-21/centOS%20%E9%83%A8%E7%BD%B2YApi%20api%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/",
      "id": "https://amschen.cn/articles/2021-02-21/centOS%20%E9%83%A8%E7%BD%B2YApi%20api%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/",
      "summary": "<p><b>前提：已安装 node.js 7.6+、mongodb 2.6+</b></p>\n<h2 id=\"配置-mongodb\"> 配置 mongodb</h2>\n<p>进入 mongodb</p>\n",
      "content_html": "<p><b>前提：已安装 node.js 7.6+、mongodb 2.6+</b></p>\n<h2 id=\"配置-mongodb\"> 配置 mongodb</h2>\n<p>进入 mongodb</p>\n\n<div><pre><code>mongo\n</code></pre>\n<div><span>1</span><br></div></div><p>创建 yapi 数据库</p>\n<div><pre><code>use yapi\n</code></pre>\n<div><span>1</span><br></div></div><p>添加用户</p>\n<div><pre><code>db.createUser<span>(</span><span>{</span>\n  user: <span>\"用户\"</span>,\n  pwd: <span>\"密码\"</span>,\n  roles: <span>[</span><span>{</span>role: <span>\"dbOwner\"</span>,db: <span>\"yapi\"</span><span>}</span><span>]</span>\n<span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>退出 mongodb</p>\n<div><pre><code>^C 即Ctrl + C\n</code></pre>\n<div><span>1</span><br></div></div><p>创建 yapi 目录</p>\n<div><pre><code><span>mkdir</span> yapi\n</code></pre>\n<div><span>1</span><br></div></div><p>切换到 yapi 目录</p>\n<div><pre><code><span>cd</span> yapi\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"下载-yapi-源码\"> 下载 YApi 源码</h2>\n<p>有两种方式：</p>\n<p>方式一：\n执行命令 git clone https://github.com/YMFE/yapi.git &lt;存放目录&gt;</p>\n<div><pre><code><span>git</span> clone https://github.com/YMFE/yapi.git vendors\n</code></pre>\n<div><span>1</span><br></div></div><p>该方法下载速度可能比较慢</p>\n<p>方式二：\n从 github 直接下载源码，解压后将源码上传到服务器对应目录，该方法速度较快</p>\n<p>配置 YApi</p>\n<p>将配置文件复制到 yapi 一级子目录下</p>\n<div><pre><code><span>cp</span> vendors/config_example.json ./config.json\n</code></pre>\n<div><span>1</span><br></div></div><p>使用 vim 打开 config.json</p>\n<div><pre><code><span>vim</span> <span>..</span>/config.json\n</code></pre>\n<div><span>1</span><br></div></div><p>配置如下：</p>\n<div><pre><code><span>{</span>\n  <span>\"port\"</span><span>:</span> <span>\"3000\"</span><span>,</span> <span>//项目端口号</span>\n  <span>\"adminAccount\"</span><span>:</span> <span>\"admin@xxx.com\"</span><span>,</span> <span>//管理员账号</span>\n  <span>\"timeout\"</span><span>:</span> <span>120000</span><span>,</span>\n  <span>\"db\"</span><span>:</span> <span>{</span>\n    <span>\"servername\"</span><span>:</span> <span>\"127.0.0.1\"</span><span>,</span> <span>//mongodb地址</span>\n    <span>\"DATABASE\"</span><span>:</span> <span>\"yapi\"</span><span>,</span> <span>//数据库名称</span>\n    <span>\"port\"</span><span>:</span> <span>27017</span><span>,</span> <span>//mongodb端口号</span>\n    <span>\"user\"</span><span>:</span> <span>\"admin\"</span><span>,</span> <span>//数据库用户名</span>\n    <span>\"pass\"</span><span>:</span> <span>\"admin\"</span><span>,</span> <span>//数据库密码</span>\n    <span>\"authSource\"</span><span>:</span> <span>\"\"</span>\n  <span>}</span><span>,</span>\n  <span>//配置邮箱</span>\n  <span>\"mail\"</span><span>:</span> <span>{</span>\n    <span>\"enable\"</span><span>:</span> <span>true</span><span>,</span>\n    <span>\"host\"</span><span>:</span> <span>\"smtp.163.com\"</span><span>,</span> <span>//需在邮箱开启服务器账号</span>\n    <span>\"port\"</span><span>:</span> <span>465</span><span>,</span>\n    <span>\"from\"</span><span>:</span> <span>\"xxx@163.com\"</span><span>,</span>\n    <span>\"auth\"</span><span>:</span> <span>{</span>\n      <span>\"user\"</span><span>:</span> <span>\"xxx@163.com\"</span><span>,</span>\n      <span>\"pass\"</span><span>:</span> <span>\"xxx\"</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n  <span>\"closeRegister\"</span><span>:</span> <span>true</span> <span>//禁止用户注册</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h2 id=\"安装程序\"> 安装程序</h2>\n<p>执行以下命令</p>\n<div><pre><code><span>npm</span> <span>install</span> --production --registry https://registry.npm.taobao.org\n</code></pre>\n<div><span>1</span><br></div></div><p>安装程序会初始化数据库索引和管理员账号</p>\n<div><pre><code><span>npm</span> run install-server\n</code></pre>\n<div><span>1</span><br></div></div><p>若出现一下情况，请检查配置中的数据库账号、密码是否与 mongodb 配置中的账号、密码一致<img src=\"https://img-blog.csdnimg.cn/20210221013250119.png\" alt=\"mongodb认证失败\" /></p>\n<h2 id=\"启动服务\"> 启动服务</h2>\n<p>方式一：\n直接启动</p>\n<div><pre><code>node server/app.js\n</code></pre>\n<div><span>1</span><br></div></div><p>启动服务器后，请访问 127.0.0.1:{config.json 配置的端口}，初次运行会有个编译的过程，请耐心等候</p>\n<p>该方式退出进程/终端关闭后服务会自动关闭</p>\n<p>方式二：</p>\n<p>使用 pm2 管理服务(推荐)</p>\n<div><pre><code><span>npm</span> i -g pm2\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code>pm2 start server/app.js\n</code></pre>\n<div><span>1</span><br></div></div><p>该方式会一直开启服务，不受终端是否关闭影响\n<img src=\"https://img-blog.csdnimg.cn/20210221015254638.png\" alt=\"\" /></p>\n<p>具体使用可以直接看文档</p>\n<p><a href=\"http://imweb.io/topic/57c8cbb27f226f687b365636\" target=\"_blank\" rel=\"noopener noreferrer\">pm2 快速入门指南</a></p>\n<p><a href=\"http://pm2.keymetrics.io/docs/usage/quick-start/\" target=\"_blank\" rel=\"noopener noreferrer\">pm2 官方文档</a></p>\n",
      "image": "https://img-blog.csdnimg.cn/20210221013250119.png",
      "date_published": "2021-02-21T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.505Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "node.js"
      ]
    },
    {
      "title": "node.js模拟登录强智科技教务系统",
      "url": "https://amschen.cn/articles/2020-11-16/node.js%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E5%BC%BA%E6%99%BA%E7%A7%91%E6%8A%80%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/",
      "id": "https://amschen.cn/articles/2020-11-16/node.js%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E5%BC%BA%E6%99%BA%E7%A7%91%E6%8A%80%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/",
      "content_html": "<h2 id=\"一、抓包、分析登录请求\"> 一、抓包、分析登录请求</h2>\n<p>首先从首页正常登录教务系统，成功登入教务系统后，F12 打开检查，然后点击“Network&quot;/&quot;网络&quot;，可以看到一下界面</p>\n<p><img src=\"./images/pasted-1.png\" alt=\"avatar\" /></p>\n<p>在这里可以看到一共有四个请求，不出意外的话，应该是按前后顺序发起请求的，不放心的话可以点击第一个请求，然后点击“Initiator”查看请求链</p>\n<p><img src=\"./images/pasted-2.png\" alt=\"avatar\" /></p>\n<p>确定请求顺序之后，开始分析第一个请求的 headers</p>\n<p>在这里可以得到请求的 url、请求方法和响应类型</p>\n<p><img src=\"./images/pasted-3.png\" alt=\"avatar\" /></p>\n<p>然后再观察 Response Headers 和 Form Data</p>\n<p><img src=\"./images/pasted-6.png\" alt=\"avatar\" /></p>\n<p>通过这两个框起来的数据和 302 状态码可以知道请求和响应的过程</p>\n<p><img src=\"./images/pasted-4.png\" alt=\"avatar\" /></p>\n<p>我们需要向“https://isea.sztu.edu.cn/Logon.do?method=logon”发送一个验证码encoded，然后返回一个重定向的链接Location.</p>\n<p>那么问题来了，怎么得到验证码？因为 form data 中没有账号密码的信息，因此可以推断该验证码是把账号和密码加密后的结果，这时候我们就要从源代码中找加密函数了</p>\n<p>刚开始找到下面这个比较可疑的文件，但是大致看了一下没有出现 account/password 等名称就放弃了（其实是太复杂了 qaq）</p>\n<p><img src=\"./images/pasted-5.png\" alt=\"avatar\" /></p>\n<p>后来想想不太对劲，我是在登陆后的源文件找加密函数，但是这个验证码应该是在登录前就应该处理完成的</p>\n<p>于是又返回首页的源文件查找，只有应该 index 的文件可能有加密方法</p>\n<p><img src=\"./images/pasted-7.png\" alt=\"avatar\" /></p>\n<p>然后还真发现了，在 onSubmit()事件里面，并且发现了一个可疑 url，我猜 request hearders 里面的 cookie 值会从这个 url 获取，这个后面写代码时在细说。</p>\n<p><img src=\"./images/pasted-8.png\" alt=\"avatar\" /></p>\n<p>既然我们拿到来加密方法，那么我们直接拿来用就行，不过有些地方需要改一下，如请求和获取账号密码那一段。</p>\n<p>首先访问一下 https://isea.sztu.edu.cn/Logon.do?method=logon&amp;flag=sess，看一下请求头和返回值之类的。</p>\n<p>确实返回了一个 cookie（注意：这个在浏览器的调试工具看不到，要借助其它工具）</p>\n<p><img src=\"./images/pasted-9.png\" alt=\"avatar\" /></p>\n<p>我们要先保存一下这个 cookie，用于登录请求</p>\n<p><strong>改写代码如下：</strong></p>\n<div><pre><code><span>var</span> Cookie <span>=</span> <span>\"\"</span><span>;</span>\n<span>var</span> encoded <span>=</span> <span>\"\"</span><span>;</span>\n<span>//封装请求头</span>\n<span>var</span> postOption1 <span>=</span> <span>{</span>\n  url<span>:</span> <span>\"https://isea.sztu.edu.cn/Logon.do?method=logon&amp;flag=sess\"</span><span>,</span>\n  method<span>:</span> <span>\"POST\"</span><span>,</span>\n  json<span>:</span> <span>true</span><span>,</span>\n  headers<span>:</span> <span>{</span>\n    <span>\"content-type\"</span><span>:</span> <span>\"application/json\"</span><span>,</span>\n  <span>}</span><span>,</span>\n  body<span>:</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>{</span><span>}</span><span>)</span><span>,</span>\n<span>}</span><span>;</span>\n<span>try</span> <span>{</span>\n  <span>await</span> <span>request</span><span>(</span>postOption1<span>,</span> <span>(</span><span>err<span>,</span> response<span>,</span> body</span><span>)</span> <span>=></span> <span>{</span>\n    Cookie <span>=</span> response<span>.</span>headers<span>[</span><span>\"set-cookie\"</span><span>]</span><span>[</span><span>0</span><span>]</span><span>.</span><span>substr</span><span>(</span><span>0</span><span>,</span> <span>44</span><span>)</span><span>;</span> <span>//保存cookie</span>\n  <span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>dataStr</span><span>)</span> <span>=></span> <span>{</span>\n    <span>//将请求返回的字符串和账号密码进行加密</span>\n    <span>if</span> <span>(</span>dataStr <span>==</span> <span>\"no\"</span><span>)</span> <span>{</span>\n      <span>return</span> <span>false</span><span>;</span>\n    <span>}</span> <span>else</span> <span>{</span>\n      <span>var</span> scode <span>=</span> dataStr<span>.</span><span>split</span><span>(</span><span>\"#\"</span><span>)</span><span>[</span><span>0</span><span>]</span><span>;</span>\n      <span>var</span> sxh <span>=</span> dataStr<span>.</span><span>split</span><span>(</span><span>\"#\"</span><span>)</span><span>[</span><span>1</span><span>]</span><span>;</span>\n      <span>var</span> code <span>=</span> account <span>+</span> <span>\"%%%\"</span> <span>+</span> password<span>;</span>\n      <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> code<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>i <span>&lt;</span> <span>20</span><span>)</span> <span>{</span>\n          encoded <span>=</span>\n            encoded <span>+</span>\n            code<span>.</span><span>substring</span><span>(</span>i<span>,</span> i <span>+</span> <span>1</span><span>)</span> <span>+</span>\n            scode<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>parseInt</span><span>(</span>sxh<span>.</span><span>substring</span><span>(</span>i<span>,</span> i <span>+</span> <span>1</span><span>)</span><span>)</span><span>)</span><span>;</span>\n          scode <span>=</span> scode<span>.</span><span>substring</span><span>(</span>\n            <span>parseInt</span><span>(</span>sxh<span>.</span><span>substring</span><span>(</span>i<span>,</span> i <span>+</span> <span>1</span><span>)</span><span>)</span><span>,</span>\n            scode<span>.</span>length\n          <span>)</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n          encoded <span>=</span> encoded <span>+</span> code<span>.</span><span>substring</span><span>(</span>i<span>,</span> code<span>.</span>length<span>)</span><span>;</span>\n          i <span>=</span> code<span>.</span>length<span>;</span>\n        <span>}</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span><span>)</span><span>;</span>\n<span>}</span> <span>catch</span> <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><p>成功拿到 encoded</p>\n<p><img src=\"./images/pasted-10.png\" alt=\"avatar\" /></p>\n<p>那么继续分析请求</p>\n<p>点击第二个请求，和第一个请求差不多，不过是 get 方法，没什么特别注意的，继续下一个</p>\n<p><img src=\"./images/pasted-11.png\" alt=\"avatar\" /></p>\n<p>这里可以发现又返回了一个 cookie，而下一步请求就就是登陆后的页面了，所以可以断定这个 cookie 是登录成功的标志</p>\n<p><img src=\"./images/pasted-12.png\" alt=\"avatar\" /></p>\n<p>最后就是能否登录成功的关键了，最后一个请求的 headers 中的 cookie 有两个参数，应该就是开始保存的 cookie 和上一步返回的 cookie 拼接起来了。</p>\n<p><img src=\"./images/pasted-13.png\" alt=\"avatar\" /></p>\n<p>基本的分析已经完成了，那么可以开始动手写代码了</p>\n<h2 id=\"二、模拟登录\"> 二、模拟登录</h2>\n<p>加密这一部在上面已经说过了，这里就不重复了</p>\n<p>直接开始登录请求</p>\n<div><pre><code><span>//封装请求头</span>\n<span>var</span> getOption <span>=</span> <span>{</span>\n  url<span>:</span> <span>\"\"</span><span>,</span>\n  method<span>:</span> <span>\"GET\"</span><span>,</span>\n  json<span>:</span> <span>true</span><span>,</span>\n  headers<span>:</span> <span>{</span>\n    <span>\"Content-Type\"</span><span>:</span> <span>\"application/x-www-form-urlencoded\"</span><span>,</span>\n    Cookie<span>:</span> Cookie<span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n<span>var</span> postOption2 <span>=</span> <span>{</span>\n  url<span>:</span> <span>\"https://isea.sztu.edu.cn/Logon.do?method=logon\"</span><span>,</span>\n  method<span>:</span> <span>\"POST\"</span><span>,</span>\n  json<span>:</span> <span>true</span><span>,</span>\n  headers<span>:</span> <span>{</span>\n    <span>\"Content-Type\"</span><span>:</span> <span>\"application/x-www-form-urlencoded\"</span><span>,</span>\n    Cookie<span>:</span> Cookie<span>,</span>\n    Host<span>:</span> <span>\"isea.sztu.edu.cn\"</span><span>,</span>\n  <span>}</span><span>,</span>\n  form<span>:</span> <span>{</span>\n    view<span>:</span> <span>\"1\"</span><span>,</span>\n    useDogCode<span>:</span> <span>\"\"</span><span>,</span>\n    encoded<span>:</span> encoded<span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n<span>try</span> <span>{</span>\n  <span>//请求https://isea.sztu.edu.cn/Logon.do?method=logon</span>\n  <span>await</span> <span>request</span><span>(</span>postOption2<span>,</span> <span>async</span> <span>(</span><span>err<span>,</span> response<span>,</span> body</span><span>)</span> <span>=></span> <span>{</span>\n    <span>//用于302会自动重定向，因此需要在这里截取数据</span>\n    <span>if</span> <span>(</span>response<span>.</span>statusCode <span>===</span> <span>302</span><span>)</span> <span>{</span>\n      getOption<span>.</span>url <span>=</span> response<span>.</span>headers<span>.</span>location<span>;</span>\n      <span>try</span> <span>{</span>\n        <span>//请求返回的location中url地址</span>\n        <span>await</span> <span>request</span><span>(</span>getOption<span>,</span> <span>async</span> <span>(</span><span>err<span>,</span> response<span>,</span> body</span><span>)</span> <span>=></span> <span>{</span>\n          Cookie <span>+=</span> response<span>.</span>headers<span>[</span><span>\"set-cookie\"</span><span>]</span><span>[</span><span>0</span><span>]</span><span>.</span><span>substr</span><span>(</span><span>0</span><span>,</span> <span>44</span><span>)</span><span>;</span> <span>//拼接cookie</span>\n          getOption<span>.</span>headers<span>.</span>Cookie <span>=</span> Cookie<span>;</span>\n          <span>try</span> <span>{</span>\n            <span>//请求返回的location中url地址，由于地址一样，不再重新赋值</span>\n            <span>//最后一个请求如果成功登录，那么body的值就是登录成功的首页html</span>\n            <span>await</span> <span>request</span><span>(</span>getOption<span>,</span> <span>(</span><span>err<span>,</span> response<span>,</span> body</span><span>)</span> <span>=></span> <span>{</span>\n              <span>let</span> nameIdx <span>=</span> body<span>.</span><span>indexOf</span><span>(</span><span>\"姓\"</span><span>)</span><span>;</span>\n              <span>let</span> noIdx <span>=</span> body<span>.</span><span>indexOf</span><span>(</span><span>\"号\"</span><span>)</span><span>;</span>\n              userInfo<span>.</span>name <span>=</span> body<span>.</span><span>substring</span><span>(</span>nameIdx <span>+</span> <span>3</span><span>,</span> nameIdx <span>+</span> <span>7</span><span>)</span><span>;</span>\n              userInfo<span>.</span>no <span>=</span> body<span>.</span><span>substring</span><span>(</span>noIdx <span>+</span> <span>2</span><span>,</span> noIdx <span>+</span> <span>14</span><span>)</span><span>;</span>\n              userInfo<span>.</span>name <span>=</span> userInfo<span>.</span>name<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>[^\\u4e00-\\u9fa5|,]+</span><span>/</span></span><span>,</span> <span>\"\"</span><span>)</span><span>;</span>\n            <span>}</span><span>)</span><span>;</span>\n          <span>}</span> <span>catch</span> <span>{</span><span>}</span>\n        <span>}</span><span>)</span><span>;</span>\n      <span>}</span> <span>catch</span> <span>{</span><span>}</span>\n    <span>}</span>\n  <span>}</span><span>)</span><span>;</span>\n  <span>return</span> userInfo<span>;</span>\n<span>}</span> <span>catch</span> <span>{</span>\n  <span>return</span> userInfo<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br></div></div><p>代码用的嵌套比较多，有回调地狱的感觉，有机会再调整。</p>\n<p>登录成功的结果</p>\n<p><img src=\"./images/pasted-14.png\" alt=\"avatar\" /></p>\n",
      "date_published": "2020-11-16T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.516Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "node.js"
      ]
    },
    {
      "title": "小程序request无反应问题",
      "url": "https://amschen.cn/articles/2021-03-07/%E5%B0%8F%E7%A8%8B%E5%BA%8Frequest%E6%97%A0%E5%8F%8D%E5%BA%94%E9%97%AE%E9%A2%98/",
      "id": "https://amschen.cn/articles/2021-03-07/%E5%B0%8F%E7%A8%8B%E5%BA%8Frequest%E6%97%A0%E5%8F%8D%E5%BA%94%E9%97%AE%E9%A2%98/",
      "content_html": "<h2 id=\"背景描述\"> 背景描述</h2>\n<p>小程序需要请求一个登录接口，然后我自己测试没有问题，然后交付测试的时候，测试说点登录无反应，并且没有任何提示。</p>\n<h2 id=\"解决过程\"> 解决过程</h2>\n<p>我找了很久也没有发现问题，一开始怀疑是苹果/安卓差异的问题，经过两个平台的测试后，发现不是这个问题，然后又降低小程序基础库，考虑是否微信版本问题，然而经过测试发现也不是。</p>\n<p>迷糊了一整天后，在看资料时，看到域名检验，忽然想起来用的登录接口的域名忘记在小程序后台加进去了（该接口是第三方的），而我在开发者工具中开启了不校验域名，故我自己无法复现上面的问题。</p>\n<p>把接口域名加进去后，在测试，正常运行。。。</p>\n<p>希望大家不会犯这么低级的错误。。。</p>\n",
      "date_published": "2021-03-07T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.517Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "mongodb使用fork启动报错问题",
      "url": "https://amschen.cn/articles/2021-03-08/mongodb%E4%BD%BF%E7%94%A8fork%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/",
      "id": "https://amschen.cn/articles/2021-03-08/mongodb%E4%BD%BF%E7%94%A8fork%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/",
      "summary": "<p>在我使用以下命令启动mongodb时，报以下错误。</p>\n<div><pre><code>mongod --dbpath /usr/local/bin/mongodb/data/db --logpath /usr/local/bin/mongodb/log  --fork\n</code></pre>\n<div><span>1</span><br></div></div>",
      "content_html": "<p>在我使用以下命令启动mongodb时，报以下错误。</p>\n<div><pre><code>mongod --dbpath /usr/local/bin/mongodb/data/db --logpath /usr/local/bin/mongodb/log  --fork\n</code></pre>\n<div><span>1</span><br></div></div>\n<div><pre><code>ERROR: child process failed, exited with error code <span>1</span>\nTo see additional information <span>in</span> this output, start without the <span>\"--fork\"</span> option.\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>原因一般是配置目录错误，我这里是log的路径配置错误，在log目录下新建空白文件“logs.log”，然后执行以下命令即可</p>\n<div><pre><code>mongod --dbpath /usr/local/bin/mongodb/data/db --logpath /usr/local/bin/mongodb/log/logs  --fork\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code>about to fork child process, waiting <span>until</span> server is ready <span>for</span> connections.\nforked process: <span>7930</span>\nchild process started successfully, parent exiting\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2021-03-08T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.528Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "数据库"
      ]
    },
    {
      "title": "a标签嵌套问题",
      "url": "https://amschen.cn/articles/2021-04-01/a%E6%A0%87%E7%AD%BE%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98/",
      "id": "https://amschen.cn/articles/2021-04-01/a%E6%A0%87%E7%AD%BE%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98/",
      "content_html": "<h2 id=\"问题描述\"> 问题描述</h2>\n<p>在魔改hexo主题的时候，有这么一个需求：在首页点击文章的大盒子时，通过a标签跳转到文章内容页面，点击盒子里面的“阅读全文”也可以跳转到文章。</p>\n<p><img src=\"./images/pasted-15.png\" alt=\"\" /></p>\n<p>于是按照正常逻辑修改----在大盒子外面套一个a标签。\n<img src=\"./images/pasted-17.png\" alt=\"\" />\n但是事与愿违，生成的时候并没有预期效果，如下：\n<img src=\"./images/pasted-16.png\" alt=\"\" />\na标签被独立出来了，并没有把内容嵌套，经查阅资料，a标签内不能再嵌套a标签</p>\n<p>下图红框两处是已经有a标签了，故在外层套a标签不能达到预期效果\n<img src=\"./images/pasted-18.png\" alt=\"\" /></p>\n<h2 id=\"解决方法\"> 解决方法</h2>\n<ol>\n<li>\n<p>舍弃内部a标签跳转（不能达到预期效果）</p>\n</li>\n<li>\n<p>利用H5-article标签的属性添加跳转链接即可</p>\n</li>\n</ol>\n<div><pre><code><span><span><span>&lt;</span>article</span> <span><span>onclick</span><span><span>=</span><span>\"</span><span>location<span>.</span>href<span>=</span><span>'#'</span></span><span>\"</span></span></span><span>></span></span> <span><span><span>&lt;/</span>article</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-01T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.535Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "二叉树之创建链式存储结构",
      "url": "https://amschen.cn/articles/2021-04-24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%88%9B%E5%BB%BA%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/",
      "id": "https://amschen.cn/articles/2021-04-24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%88%9B%E5%BB%BA%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/",
      "summary": "<h2 id=\"先序创建\"> 先序创建</h2>\n<p>说明：空树用字符‘0’表示</p>\n",
      "content_html": "<h2 id=\"先序创建\"> 先序创建</h2>\n<p>说明：空树用字符‘0’表示</p>\n\n<div><pre><code>class TreeNode {\npublic:\n    char data;\n    ListNode *lChild;\n    ListNode *rChild;\n    ListNode() {\n        lChild = NULL;\n        rChild = NULL;\n    }\n};\n  \nclass Tree {\npublic:\n    TreeNode *root;\n    int pos;\n    Tree() {\n        pos = 0;\n    }\n    TreeNode *createTree(char str[]) {\n        char data = str[pos];\n        pos++;\n        if(data != &#39;0&#39;) {\n            ListNode *p = new TreeNode();\n            p-&gt;data = data;\n            p-&gt;lChild = createTree(str);\n            p-&gt;rChild = createTree(str);\n            return p;\n        } else {\n            return NULL; \n        }\n    }\n};\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div>",
      "date_published": "2021-04-24T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.545Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "数据结构"
      ]
    },
    {
      "title": "mongoose踩坑记录",
      "url": "https://amschen.cn/articles/2021-04-04/mongoose%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/",
      "id": "https://amschen.cn/articles/2021-04-04/mongoose%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/",
      "content_html": "<p>在node.js项目中使用mongoose操作mongodb，然后就悲剧了，无论怎样查询结果都是null，弄了好几个小时也没有找到问题</p>\n<div><pre><code><span>const</span> mongoose <span>=</span> <span>require</span><span>(</span><span>'mongoose'</span><span>)</span><span>;</span>\nmongoose<span>.</span><span>connect</span><span>(</span><span>'mongodb://localhost/hexo_admin'</span><span>,</span> <span>{</span>\n  useNewUrlParser<span>:</span> <span>true</span><span>,</span>\n  useUnifiedTopology<span>:</span> <span>true</span>\n<span>}</span><span>)</span><span>;</span>\nmongoose<span>.</span><span>set</span><span>(</span><span>'useFindAndModify'</span><span>,</span> <span>false</span><span>)</span><span>;</span>\n\n<span>const</span> db <span>=</span> mongoose<span>.</span>connection<span>;</span>\ndb<span>.</span><span>on</span><span>(</span><span>'error'</span><span>,</span> console<span>.</span><span>error</span><span>.</span><span>bind</span><span>(</span>console<span>,</span> <span>'connection error'</span><span>)</span><span>)</span><span>;</span>\n\n<span>var</span> userSchema <span>=</span> mongoose<span>.</span><span>Schema</span><span>(</span><span>{</span>\n  username<span>:</span> String<span>,</span>\n  password<span>:</span> String\n<span>}</span><span>)</span><span>;</span>\n\n<span>var</span> Users <span>=</span> mongoose<span>.</span><span>model</span><span>(</span><span>'users_admin'</span><span>,</span> userSchema<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>然后查了很多资料，发现了一个骚操作，mongoose在创建model的时候会自动给表名加 ‘s’，但是mongodb不会，这就导致了mongoose查询的表名和我预期不一致，故一直查不到数据。</p>\n<p>更改如下：</p>\n<div><pre><code><span>var</span> Users <span>=</span> mongoose<span>.</span><span>model</span><span>(</span><span>'users_admin'</span><span>,</span> userSchema<span>,</span> users_admin<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>无语死了。。。。</p>\n",
      "date_published": "2021-04-04T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.549Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "数据库"
      ]
    },
    {
      "title": "flv.js的使用",
      "url": "https://amschen.cn/articles/2021-04-03/flv.js%E4%BD%BF%E7%94%A8/",
      "id": "https://amschen.cn/articles/2021-04-03/flv.js%E4%BD%BF%E7%94%A8/",
      "content_html": "<h2 id=\"_1-引入-flv-js\"> 1. 引入 flv.js</h2>\n<h3 id=\"_1-1-script-标签引入\"> 1.1 script 标签引入</h3>\n<h4 id=\"原生-html-引入\"> 原生 html 引入</h4>\n<div><pre><code><span>&lt;</span>script type<span>=</span><span>\"text/javascript\"</span> src<span>=</span><span>\"https://unpkg.com/video.js/dist/video.min.js\"</span><span>></span><span>&lt;</span><span>/</span>script<span>></span>\n<span>&lt;</span>script type<span>=</span><span>\"text/javascript\"</span> src<span>=</span><span>\"https://unpkg.com/flv.js/dist/flv.min.js\"</span><span>></span><span>&lt;</span><span>/</span>script<span>></span>\n<span>&lt;</span>script type<span>=</span><span>\"text/javascript\"</span> src<span>=</span><span>\"https://unpkg.com/videojs-flvjs/dist/videojs-flvjs.min.js\"</span><span>></span><span>&lt;</span><span>/</span>script<span>></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h4 id=\"vue-引入\"> Vue 引入</h4>\n<p>理论上 Vue 也可以使用什么方式引入 flv.js，我尝试了一下，发现并没有发起请求，及 script 标签并没有被执行，可能和生命周期有关。</p>\n<p>于是我选择采用另一种方式，在组件构建时向 DOM 添加 script 节点</p>\n<div><pre><code><span>mounted</span><span>(</span><span>)</span> <span>{</span>\n  <span>// 引入flv.js</span>\n  <span>const</span> extendJs <span>=</span> <span>[</span>\n    <span>'https://unpkg.com/video.js/dist/video.min.js'</span><span>,</span>\n    <span>'https://unpkg.com/flv.js/dist/flv.min.js'</span><span>,</span>\n    <span>'https://unpkg.com/videojs-flvjs/dist/videojs-flvjs.min.js'</span>\n  <span>]</span><span>;</span>\n  <span>for</span><span>(</span><span>let</span> url <span>of</span> extendJs<span>)</span> <span>{</span>\n    <span>let</span> s <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'script'</span><span>)</span><span>;</span>\n    s<span>.</span>type <span>=</span> <span>'text/javascript'</span><span>;</span>\n    s<span>.</span>src <span>=</span> url<span>;</span>\n    document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>s<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>,</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id=\"_1-2-通过-npm-包引入\"> 1.2 通过 npm 包引入</h3>\n<div><pre><code><span>npm</span> <span>install</span> --save flv.js\n<span>npm</span> <span>install</span>          <span># 安装包依赖</span>\n<span>npm</span> <span>install</span> -g gulp  <span># 安装构建工具</span>\ngulp release         <span># 打包并使包最小化，存储在dist文件夹</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_2-基本使用方法\"> 2. 基本使用方法</h2>\n<h3 id=\"_2-1-基本配置说明\"> 2.1.基本配置说明</h3>\n<h4 id=\"mediadatasource\"> MediaDataSource</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">type</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">视频流格式，参数 flv/mp4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">isLive</td>\n<td style=\"text-align:left\">Boolean (非必选)</td>\n<td style=\"text-align:left\">是否为直播，即是否为实时推流</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cors</td>\n<td style=\"text-align:left\">Boolean (非必选)</td>\n<td style=\"text-align:left\">拉流是否跨域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">withCredentials</td>\n<td style=\"text-align:left\">Boolean (非必选)</td>\n<td style=\"text-align:left\">是否携带 cookies</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hasAudio</td>\n<td style=\"text-align:left\">Boolean (非必选)</td>\n<td style=\"text-align:left\">是否开启声音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hasVideo</td>\n<td style=\"text-align:left\">Boolean (非必选)</td>\n<td style=\"text-align:left\">是否开启图像</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">duration</td>\n<td style=\"text-align:left\">Number (非必选)</td>\n<td style=\"text-align:left\">视频流总时间长度（ms）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">filesize</td>\n<td style=\"text-align:left\">Number (非必选)</td>\n<td style=\"text-align:left\">文件大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">url</td>\n<td style=\"text-align:left\">String (非必选)</td>\n<td style=\"text-align:left\">视频流地址，支持 http(s)、ws(s)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">segments</td>\n<td style=\"text-align:left\">Array<a href=\"%E9%9D%9E%E5%BF%85%E9%80%89\">duration, filesize, url</a></td>\n<td style=\"text-align:left\">视频列表</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：segments 存在时，则将播放器列为多源媒体播放，duration、filesize、url 会失效</strong></p>\n<p><strong>更多内容可以看官方文档 =&gt; <a href=\"https://github.com/bilibili/flv.js/blob/master/docs/api.md\" target=\"_blank\" rel=\"noopener noreferrer\">flv.js api 文档</a></strong></p>\n<h3 id=\"_2-2-实例\"> 2.2. 实例</h3>\n<p>这里以 Vue 为例</p>\n<h4 id=\"页面部分\"> 页面部分</h4>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>video-player<span>\"</span></span> <span>v-if</span><span><span>=</span><span>\"</span>radio<span>\"</span></span><span>></span></span>\n      <span>&lt;!-- 播放器控制按钮 --></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>controls<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>flv_load()<span>\"</span></span><span>></span></span>加载<span><span><span>&lt;/</span>button</span><span>></span></span>\n        <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>flv_start()<span>\"</span></span><span>></span></span>开始<span><span><span>&lt;/</span>button</span><span>></span></span>\n        <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>flv_pause()<span>\"</span></span><span>></span></span>暂停<span><span><span>&lt;/</span>button</span><span>></span></span>\n        <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>flv_destroy()<span>\"</span></span><span>></span></span>停止<span><span><span>&lt;/</span>button</span><span>></span></span>\n        <span><span><span>&lt;</span>input</span>\n          <span><span>style</span><span><span>=</span><span>\"</span><span><span>width</span><span>:</span>100px</span><span>\"</span></span></span>\n          <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span>\n          <span>name</span><span><span>=</span><span>\"</span>seekpoint<span>\"</span></span>\n          <span>placeholder</span><span><span>=</span><span>\"</span>输入跳转时间(s)<span>\"</span></span>\n        <span>/></span></span>\n        <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>flv_seekto()<span>\"</span></span><span>></span></span>跳转<span><span><span>&lt;/</span>button</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span>&lt;!-- 播放器 --></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>mainContainer<span>\"</span></span> <span>@click</span><span><span>=</span><span>\"</span>play<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>video</span>\n          <span>id</span><span><span>=</span><span>\"</span>videoElement<span>\"</span></span>\n          <span>class</span><span><span>=</span><span>\"</span>centeredVideo<span>\"</span></span>\n          <span>controls</span>\n          <span>autoplay</span>\n          <span>width</span><span><span>=</span><span>\"</span>1024<span>\"</span></span>\n          <span>height</span><span><span>=</span><span>\"</span>576<span>\"</span></span>\n        <span>></span></span><span><span><span>&lt;/</span>video</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span>&lt;!-- 拉流日志 --></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>logs-box<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>b</span><span>></span></span>日志<span><span><span>&lt;/</span>b</span><span>></span></span>\n      <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>clear-btn<span>\"</span></span> <span>@click</span><span><span>=</span><span>\"</span>clear<span>\"</span></span><span>></span></span>清空日志<span><span><span>&lt;/</span>span</span><span>></span></span>\n      <span><span><span>&lt;</span>textarea</span> <span>id</span><span><span>=</span><span>\"</span>logs<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>logs<span>\"</span></span> <span>:value</span><span><span>=</span><span>\"</span>logs<span>\"</span></span> <span>readonly</span><span>></span></span><span><span><span>&lt;/</span>textarea</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h4 id=\"js-部分\"> js 部分</h4>\n<div><pre><code><span>&lt;</span>script<span>></span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span><span>{</span>\n    <span>return</span> <span>{</span>\n      player<span>:</span> <span>{</span><span>}</span><span>,</span> <span>//dom对象</span>\n      logs<span>:</span> <span>'tips: hls视频流播放无日志输出'</span><span>,</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>// 引入flv.js</span>\n    <span>const</span> extendJs <span>=</span> <span>[</span>\n      <span>'https://unpkg.com/video.js/dist/video.min.js'</span><span>,</span>\n      <span>'https://unpkg.com/flv.js/dist/flv.min.js'</span><span>,</span>\n      <span>'https://unpkg.com/videojs-flvjs/dist/videojs-flvjs.min.js'</span>\n    <span>]</span><span>;</span>\n    <span>for</span><span>(</span><span>let</span> url <span>of</span> extendJs<span>)</span> <span>{</span>\n      <span>let</span> s <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'script'</span><span>)</span><span>;</span>\n      s<span>.</span>type <span>=</span> <span>'text/javascript'</span><span>;</span>\n      s<span>.</span>src <span>=</span> url<span>;</span>\n      document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>s<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n  methods<span>:</span> <span>{</span>\n    <span>play</span><span>(</span><span>)</span> <span>{</span>\n      <span>var</span> flvUrl <span>=</span> <span>\"https://mister-ben.github.io/videojs-flvjs/bbb.flv\"</span><span>;</span>  <span>//flv测试视频流</span>\n      <span>this</span><span>.</span>player <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'videoElement'</span><span>)</span><span>;</span>  <span>//获取 video Dom 节点</span>\n      <span>if</span> <span>(</span>flvjs<span>.</span><span>isSupported</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n        flvjs<span>.</span>LoggingControl<span>.</span>forceGlobalTag <span>=</span> <span>true</span><span>;</span>  <span>//设置日志打印</span>\n        <span>var</span> flvPlayer <span>=</span> flvjs<span>.</span><span>createPlayer</span><span>(</span><span>{</span>\n          type<span>:</span> <span>'flv'</span><span>,</span>  <span>//商品类型</span>\n          <span>\"isLive\"</span><span>:</span> <span>true</span><span>,</span>  <span>//是否实时流</span>\n          <span>\"hasAudio\"</span><span>:</span> <span>false</span><span>,</span>  <span>//是否包含音频</span>\n          url<span>:</span> <span>this</span><span>.</span>url  <span>//视频流地址</span>\n        <span>}</span><span>)</span><span>;</span>\n\n        flvPlayer<span>.</span><span>attachMediaElement</span><span>(</span>videoElement<span>)</span><span>;</span>  <span>//添加配置进Dom节点</span>\n        flvPlayer<span>.</span><span>load</span><span>(</span><span>)</span><span>;</span> <span>//加载</span>\n        <span>this</span><span>.</span><span>flv_start</span><span>(</span><span>)</span><span>;</span> <span>//开始播放</span>\n\n        <span>//打印日志</span>\n        flvjs<span>.</span>LoggingControl<span>.</span><span>addLogListener</span><span>(</span><span>(</span><span>type<span>,</span> log</span><span>)</span><span>=></span><span>{</span>\n          <span>this</span><span>.</span>logs <span>+=</span> log <span>+</span> <span>'\\n'</span><span>;</span>\n          document<span>.</span><span>getElementById</span><span>(</span><span>'logs'</span><span>)</span><span>.</span>scrollTop <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'logs'</span><span>)</span><span>.</span>scrollHeight<span>;</span>\n        <span>}</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span><span>,</span>\n    <span>//播放</span>\n    <span>flv_start</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>player<span>.</span><span>play</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n\t<span>//暂停</span>\n    <span>flv_pause</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>player<span>.</span><span>pause</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n\t<span>//停止</span>\n    <span>flv_destroy</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>player<span>.</span><span>pause</span><span>(</span><span>)</span><span>;</span>\n      <span>this</span><span>.</span>player<span>.</span><span>unload</span><span>(</span><span>)</span><span>;</span>\n      <span>this</span><span>.</span>player<span>.</span><span>detachMediaElement</span><span>(</span><span>)</span><span>;</span>\n      <span>this</span><span>.</span>player<span>.</span><span>destroy</span><span>(</span><span>)</span><span>;</span>\n      <span>this</span><span>.</span>player <span>=</span> <span>null</span><span>;</span>\n    <span>}</span><span>,</span>\n\t<span>//进度跳转</span>\n    <span>flv_seekto</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>player<span>.</span>currentTime <span>=</span> <span>parseFloat</span><span>(</span>document<span>.</span><span>getElementsByName</span><span>(</span><span>'seekpoint'</span><span>)</span><span>[</span><span>0</span><span>]</span><span>.</span>value<span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n\t<span>//清除日志</span>\n    <span>clear</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>logs <span>=</span> <span>''</span><span>;</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n<span>}</span>\n<span>&lt;</span><span>/</span>script<span>></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br></div></div><h4 id=\"css-部分\"> css 部分</h4>\n<div><pre><code><span>&lt;style rel=\"stylesheet/scss\" lang=\"scss\" scoped>\n  button:hover</span> <span>{</span>\n    <span>cursor</span><span>:</span> pointer<span>;</span>\n  <span>}</span>\n  <span>.video-player</span> <span>{</span>\n    <span>width</span><span>:</span> 70%<span>;</span>\n    <span>margin-top</span><span>:</span> 10px<span>;</span>\n    <span>margin-left</span><span>:</span> 60%<span>;</span>\n    <span>transform</span><span>:</span> <span>translateX</span><span>(</span>-50%<span>)</span><span>;</span>\n  <span>}</span>\n  <span>.logs-box</span> <span>{</span>\n    <span>position</span><span>:</span> absolute<span>;</span>\n    <span>top</span><span>:</span> 4px<span>;</span>\n    <span>left</span><span>:</span> 20px<span>;</span>\n    <span>width</span><span>:</span> 300px<span>;</span>\n    <span>height</span><span>:</span> 750px<span>;</span>\n    <span>margin-top</span><span>:</span> 10px<span>;</span>\n    <span>.clear-btn</span> <span>{</span>\n      <span>margin-left</span><span>:</span> 210px<span>;</span>\n      <span>margin-bottom</span><span>:</span> 2px<span>;</span>\n      <span>padding</span><span>:</span> 4px 6px<span>;</span>\n      <span>background-color</span><span>:</span> #efefef<span>;</span>\n      <span>border</span><span>:</span> 1px solid #999<span>;</span>\n      <span>border-radius</span><span>:</span> 2px<span>;</span>\n    <span>}</span>\n    <span>.clear-btn:hover</span> <span>{</span>\n      <span>cursor</span><span>:</span> pointer<span>;</span>\n    <span>}</span>\n    <span>.logs</span> <span>{</span>\n      <span>width</span><span>:</span> 100%<span>;</span>\n      <span>height</span><span>:</span> 94%<span>;</span>\n      <span>margin-top</span><span>:</span> 6px<span>;</span>\n      <span>padding-top</span><span>:</span> 4px<span>;</span>\n      <span>padding-left</span><span>:</span> 2px<span>;</span>\n      <span>resize</span><span>:</span> none<span>;</span>\n    <span>}</span>\n  <span>}</span>\n&lt;/style>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div>",
      "date_published": "2021-04-03T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.592Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "web视频播放"
      ]
    },
    {
      "title": "二叉树之数组存储—先序遍历（递归）",
      "url": "https://amschen.cn/articles/2021-04-24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E2%80%94%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92%EF%BC%89/",
      "id": "https://amschen.cn/articles/2021-04-24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E2%80%94%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92%EF%BC%89/",
      "content_html": "<h2 id=\"摘要\"> 摘要</h2>\n<p>说明：二叉树可以采用数组的方法进行存储，把数组中的数据依次自上而下,自左至右存储到二叉树结点中，一般二叉树与完全二叉树对比，比完全二叉树缺少的结点就在数组中用0来表示。</p>\n<h2 id=\"主要代码\"> 主要代码</h2>\n<div><pre><code>#include &lt;iostream&gt;\nusing namespace std;\n \nint preOrderTraverse(int tree[], int i, int len) { \n    if (i &lt; len) {\n        if (tree[i]) {\n            cout &lt;&lt; tree[i] &lt;&lt; &quot; &quot;;\n            preOrderTraverse(tree, (2 * i + 1), len);  //左子树遍历\n            preOrderTraverse(tree, (2 * i + 2), len);  //右子树遍历\n        }\n    }\n}\n \nint main() {\n    int t;\n    cin &gt;&gt; t;  //t个测试用例\n    while (t--) {\n        int len;\n        cin &gt;&gt; len;\n        int tree[len];\n        for (int i = 0; i &lt; len; i++) {\n            cin &gt;&gt; tree[i];\n        }\n        preOrderTraverse(tree, 0, len);\n        cout&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p><strong>测试用例</strong></p>\n<p>输入：</p>\n<div><pre><code>3\n3 1 2 3\n5 1 2 3 0 4\n13 1 2 3 4 0 5 6 7 8 0 0 9 10\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>输出：</p>\n<div><pre><code>1 2 3 \n1 2 4 3 \n1 2 4 7 8 3 5 9 10 6 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2021-04-24T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.596Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "数据结构"
      ]
    },
    {
      "title": "HTTP/HTTPS工作原理",
      "url": "https://amschen.cn/articles/2021-09-17/HTTP/HTTPS%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/",
      "id": "https://amschen.cn/articles/2021-09-17/HTTP/HTTPS%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/",
      "content_html": "<h2 id=\"http\"> HTTP</h2>\n<div><pre><code>超文本传输协议（HyperText Transfer Protocol，HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"工作原理\"> 工作原理</h3>\n<div><pre><code>HTTP协议采用了请求<span>/</span>响应模型，由客户端向服务器发送一个请求报文，然后服务端返回一个响应报文。\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"报文内容\"> 报文内容</h4>\n<p>请求报文包含以下内容：</p>\n<ul>\n<li>请求的方法；</li>\n<li>URL；</li>\n<li>协议版本；</li>\n<li>请求头部；</li>\n<li>请求数据。</li>\n</ul>\n<p>响应报文包含以下内容：</p>\n<ul>\n<li>协议的版本；</li>\n<li>成功或者错误代码；</li>\n<li>服务器信息；</li>\n<li>响应头部；</li>\n<li>响应数据。</li>\n</ul>\n<h4 id=\"请求-响应步骤\"> 请求/响应步骤</h4>\n<ol>\n<li>客户端连接Web服务器</li>\n<li>客户端发送HTTP请求\n<ul>\n<li>客户端向Web服务器发送一个文本的请求报文。</li>\n<li>一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</li>\n</ul>\n</li>\n<li>服务端接收请求并返回HTTP响应\n<ul>\n<li>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。</li>\n<li>一个响应由状态行、响应头部、空行和响应数据4部分组成。</li>\n</ul>\n</li>\n<li>释放TCP连接\n<ul>\n<li>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接。</li>\n<li>若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求。</li>\n</ul>\n</li>\n<li>客户端浏览器解析HTML内容</li>\n</ol>\n<h3 id=\"http的五大特点\"> HTTP的五大特点</h3>\n<ol>\n<li>支持<strong>C/S</strong>模式。</li>\n<li><strong>简单快速</strong>：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 <code>GET</code>、<code>HEAD</code>、<code>POST</code>。每种方法规定了客户与服务器联系的类型不同。由于 <code>HTTP</code> 协议简单，使得 <code>HTTP</code> 服务器的程序规模小，因而通信速度很快。</li>\n<li><strong>灵活</strong>：HTTP允许传输任意类型的数据对象。正在传输的类型由 <code>Content-Type</code> 加以标记。</li>\n<li><strong>无连接</strong>：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。早期这么做的原因是请求资源少，追求快。后来通过 <code>Connection: Keep-Alive</code> 实现长连接</li>\n<li><strong>无状态</strong>：<code>HTTP</code> 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li>\n</ol>\n<h3 id=\"http的缺点\"> HTTP的缺点</h3>\n<ul>\n<li>通信使用明文(不加密),内容可能会被窃听。</li>\n<li>不验证通信方的身份,因此有可能遭遇伪装。</li>\n<li>无法证明报文的完整性,所以有可能已遭篡改。</li>\n</ul>\n<h2 id=\"https\"> HTTPS</h2>\n<h3 id=\"加密方式\"> 加密方式</h3>\n<ul>\n<li>加密方式有两种：对称加密和非对称加密\n<ul>\n<li>对称加密：加密和解密使用的密钥是相同的，这种加密方式的安全性在于密钥是否做好保密；</li>\n<li>非对称加密：加密和解密使用的密钥是不相同的，两个密钥分别是公钥和私钥，公钥用于加密（可公开），私钥用于解密（不可公开）</li>\n</ul>\n</li>\n<li>区别：对称加密算法相比非对称加密算法来说，效率要高得多，性能也好，所以交互的场景下多用对称加密。</li>\n</ul>\n<h3 id=\"证书\"> 证书</h3>\n<div><pre><code>由权威部门颁发的称为证书（Certificate）\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"证书包含的内容\"> 证书包含的内容</h4>\n<ul>\n<li>公钥</li>\n<li>证书所有者</li>\n<li>证书的发布机构</li>\n<li>证书有效期</li>\n<li>签名算法</li>\n<li>证书的指纹和计算指纹所使用的指纹算法</li>\n<li>……</li>\n</ul>\n<h3 id=\"工作模式\"> 工作模式</h3>\n<h4 id=\"建立ssl连接\"> 建立SSL连接</h4>\n<div><pre><code>SSL四次握手\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>\n<p>第一次握手</p>\n<ul>\n<li>Client发送 <code>Client Hello</code>（包含一个随机数N1）报文开始 SSL通信。报文中包含Client支持的 SSL的指定版本、 加密组件（Cipher Suite） 列表。</li>\n</ul>\n</li>\n<li>\n<p>第二次握手</p>\n<ol>\n<li>Server可进行 SSL通信时， 会以 <code>Server Hello</code>（包含一个随机数N2）报文作为应答。 和Client一样， 在报文中包含 SSL版本以及加密组件。 Server的加密组件内容是从接收到的客户端加密组件内筛选出来的。</li>\n<li>然后Server发送 <code>Certificate</code> 报文。 报文中包含公开的证书。</li>\n<li>最后Server发送 <code>Server Hello Done</code> 报文通知Client， 最初阶段的 SSL握手协商部分结束。</li>\n</ol>\n</li>\n<li>\n<p>第三次握手（证书校验）</p>\n<ol>\n<li>Client以 <code>Client Key Exchange</code> 报文作为回应。 报文中包含通信加密中使用的一种被称为 Pre-master secret 的随机密码串(N3)。 该报文已用步骤 3 中的公开的证书进行加密（N1+N2+N3 =&gt; 对称密钥）；Server同时进行该加密计算步骤。</li>\n<li>接着Client继续发送 <code>Change Cipher Spec</code> 报文。 该报文会提示服务器， 在此报文之后的通信会采用Pre-master secret 加密。</li>\n<li>Client发送消息进行加密传输测试（Encrypted Handshake Message）</li>\n<li>Client发送 <code>Finished</code> 报文。 该报文包含连接至今全部报文的整体校验值。 这次握手协商是否能够成功， 要以服务器是否能够正确解密该报文作为判定标准。</li>\n</ol>\n</li>\n<li>\n<p>第四次握手</p>\n<ol>\n<li>Server同样发送 <code>Change Cipher Spec</code> 报文。</li>\n<li>Server同样发送 <code>Encrypted Handshake Message</code> 报文。</li>\n<li>Server同样发送 <code>Finished</code> 报文。</li>\n</ol>\n</li>\n</ul>\n<p><strong>整体流程</strong></p>\n<p>交换协议版本号 =&gt; 选择一个通信双方都支持的加密方式 =&gt; 对两端实现身份验证 =&gt;</p>\n<h4 id=\"建立tcp连接-发送http请求\"> 建立TCP连接，发送HTTP请求</h4>\n<ol>\n<li>Server和Client的 <code>Finished</code> 报文交换完成后，通信会受到SSL的保护，接下来开始应用层协议的通信，发送HTTP请求。</li>\n<li>应用层协议通信，发送HTTP响应。</li>\n</ol>\n<h4 id=\"断开连接\"> 断开连接</h4>\n<ol>\n<li>Client主动断开连接。Client发送 <code>close_notify</code> 报文。</li>\n<li>然后Client发送 <code>TCP FIN</code> 报文来关闭与 TCP的通信。</li>\n</ol>\n<h3 id=\"ssl的缺点\"> SSL的缺点</h3>\n<ul>\n<li>通信慢：和HTTP相比，网络负载会变慢2~100倍（除去和TCP 连接、 发送 HTTP 请求 • 响应以外， 还必须进行 SSL通信，因此整体上处理通信量不可避免会增加）。</li>\n<li>处理速度慢：由于SSL必须进行加密处理，要大量消耗CPU 及内存等资源， 导致处理速度变慢。在服务器和客户端都需要进行加密和解密的运算处理。 因此从结果上讲， 比起 HTTP 会更多地消耗服务器和客户端的硬件资源， 导致负载增强。</li>\n</ul>\n",
      "date_published": "2021-09-17T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.647Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "网络协议"
      ]
    },
    {
      "title": "浅谈MITM攻击",
      "url": "https://amschen.cn/articles/2021-10-02/%E6%B5%85%E8%B0%88MITM%E6%94%BB%E5%87%BB/",
      "id": "https://amschen.cn/articles/2021-10-02/%E6%B5%85%E8%B0%88MITM%E6%94%BB%E5%87%BB/",
      "content_html": "<h2 id=\"简述\"> 简述</h2>\n<p>MITM 攻击即中间人攻击，攻击者在客户端和服务端两端分别建立独立的连接，并交换它们之间传输的数据，使得通信两端认为其在一个私密的连接与对方传输数据，实际上其会话完全被攻击者掌控。</p>\n<h2 id=\"攻击过程\"> 攻击过程</h2>\n<p>这里以课堂传纸条为例。</p>\n<p>A 需要向 B 传递一个纸条，C在其传递的过程中 ，那么在 A 向 B 传输信息的过程中，其信息是有可能被 C 截获、篡改的。</p>\n<p>比如：</p>\n<p>A(发)：今天去哪玩？</p>\n<p>C(改)：今天去哪吃饭？</p>\n<p>B(收)：今天去哪吃饭？</p>\n<p>由上面的例子可以看出，C 在其中充当了中间人的身份，A 向 B 发送的信息已经被 C 截获和篡改了，因此称 AB 传输信息的过程中遭到了中间人攻击。</p>\n<h3 id=\"http中间人攻击\"> HTTP中间人攻击</h3>\n<p>由于HTTP通信没有身份验证，而且通信不加密传输(裸奔~，这样导致的一个安全隐患就是上面提及的中间人攻击，其传输过程容易被中间人篡改，因此现在更推崇HTTPS</p>\n<h4 id=\"如何防范\"> 如何防范</h4>\n<h5 id=\"非对称加密\"> 非对称加密？</h5>\n<p>客户端使用私钥加密，将公钥和密钥发送给服务端，服务端使用公钥加密，将密钥发送给客户端，然后通过该密钥通信。但是这种方式仍然有安全隐患，比如中间人截获的客户端发送的密钥和公钥，然后用自己的公钥加密返回给客户端，用自己的私钥生成密钥，然后发送给服务端，此时通信双方是感知不到自己的通信密钥被截获了的。</p>\n<h5 id=\"数字证书\"> 数字证书</h5>\n<p>将公钥发送给证书颁发机构申请证书，CA通过自己的私钥加密公钥，通过域名等身份信息去生成证书签名，通信是否安全就取决于证书签名真伪的校验。</p>\n",
      "date_published": "2021-10-02T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.649Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "网络安全"
      ]
    },
    {
      "title": "git常用命令",
      "url": "https://amschen.cn/articles/2021-10-04/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
      "id": "https://amschen.cn/articles/2021-10-04/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
      "content_html": "<h3 id=\"初始化\"> 初始化</h3>\n<div><pre><code><span>git</span> init\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"添加文件\"> 添加文件</h3>\n<p>文件须在当前目录下</p>\n<h4 id=\"添加单个-多个文件\"> 添加单个/多个文件</h4>\n<div><pre><code><span>git</span> <span>add</span> <span>[</span>文件名<span>]</span> <span>[</span>文件名<span>]</span> <span>[</span>文件名<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"添加当前目录所有文件\"> 添加当前目录所有文件</h4>\n<div><pre><code><span>git</span> <span>add</span> *\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"修改提交到仓库\"> 修改提交到仓库</h3>\n<div><pre><code><span>git</span> commit -m <span>[</span>提交描述<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"关联远端仓库\"> 关联远端仓库</h3>\n<div><pre><code><span>git</span> remote <span>add</span> <span>[</span>远端仓库地址名称<span>(</span>orgin<span>)</span><span>]</span> <span>[</span>仓库地址<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"克隆远端仓库\"> 克隆远端仓库</h3>\n<div><pre><code><span>git</span> clone <span>[</span>仓库地址<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"本地修改同步到远端仓库\"> 本地修改同步到远端仓库</h3>\n<h4 id=\"首次提交\"> 首次提交</h4>\n<div><pre><code><span>git</span> push -u <span>[</span>远端仓库地址名称<span>(</span>orgin<span>)</span><span>]</span> <span>[</span>分支名<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"后续提交\"> 后续提交</h4>\n<div><pre><code><span>git</span> push\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"查看仓库状态\"> 查看仓库状态</h3>\n<div><pre><code><span>git</span> status\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"查看当前版本各个提交情况\"> 查看当前版本各个提交情况</h3>\n<div><pre><code><span>git</span> log\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code><span>git</span> log --pretty<span>=</span>online\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"版本回退\"> 版本回退</h3>\n<div><pre><code><span>git</span> reset --hard HEAD^\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code><span>git</span> reset --hard HEAD~n\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code><span>git</span> reset --hard ID\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>HEAD 表示当前版本</li>\n<li><code>^</code>表示上一个版本</li>\n<li><code>~n</code>表示回退 n 个版本</li>\n<li>通过 ID 回退到特定版本，通过 log 可以查看版本 ID</li>\n</ul>\n<h3 id=\"本地仓库同步远端仓库\"> 本地仓库同步远端仓库</h3>\n<div><pre><code><span>git</span> pull\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"查看当前分支\"> 查看当前分支</h3>\n<div><pre><code><span>git</span> branch\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"创建并切换分支\"> 创建并切换分支</h3>\n<div><pre><code><span>git</span> checkout -b <span>[</span>分支名<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"切换分支\"> 切换分支</h3>\n<div><pre><code><span>git</span> checkout <span>[</span>分支名<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"删除分支\"> 删除分支</h3>\n<div><pre><code><span>git</span> checkout -d <span>[</span>分支名<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"撤销更改\"> 撤销更改</h3>\n<p>文件在<code>add</code>后<code>commit</code>前使用改命令才能生效，一定要加<code>--</code></p>\n<div><pre><code><span>git</span> checkout --<span>[</span>文件名<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"合并分支\"> 合并分支</h3>\n<div><pre><code><span>git</span> merge <span>[</span>分支名<span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-10-04T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.656Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "版本管理"
      ]
    },
    {
      "title": "记一次笔试",
      "url": "https://amschen.cn/articles/2021-09-29/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AC%94%E8%AF%95/",
      "id": "https://amschen.cn/articles/2021-09-29/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AC%94%E8%AF%95/",
      "content_html": "<h2 id=\"前言\"> 前言</h2>\n<p>四道算法题，30 分钟，都是 LeetCode 的简单和中等题</p>\n<p>第一题 Ac 80%，第二题没做出来，剩下两题都 Ac 100%</p>\n<p>睡完午觉刚起床就做了，可能是脑子不太清醒，感觉应该可以全做出来的</p>\n<p>太菜了我 😭</p>\n<h2 id=\"第一题-删除字符串\"> 第一题 删除字符串</h2>\n<h3 id=\"描述\"> 描述</h3>\n<p>给出两个字符串 <code>str</code> 和 <code>sub</code>，你的任务是在 <code>str</code> 中完全删除那些在 <code>sub</code> 中存在的字符。</p>\n<h3 id=\"样例\"> 样例</h3>\n<div><pre><code>输入: <span>str</span><span>=</span><span>\"They are students\"</span>，sub<span>=</span><span>\"aeiou\"</span>\n输出: <span>\"Thy r stdnts\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"代码\"> 代码</h3>\n<p>做的时候脑抽了没 Ac 100%，结束后重新看了一下，直接用正则表达式匹配，能 Ac 100%，但是速度太慢了，应该有更好的方法。</p>\n<div><pre><code><span>CharacterDeletion</span><span>(</span><span>str<span>,</span> sub</span><span>)</span> <span>{</span>\n    <span>let</span> modeStr<span>=</span><span>'['</span>\n    <span>for</span><span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> sub<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        modeStr <span>+=</span> sub<span>.</span><span>charAt</span><span>(</span>i<span>)</span> <span>+</span> <span>'|'</span><span>;</span>\n    <span>}</span>\n    modeStr <span>+=</span> <span>']'</span><span>;</span>\n    <span>let</span> reg <span>=</span> <span>new</span> <span>RegExp</span><span>(</span>modeStr<span>,</span> <span>'gm'</span><span>)</span><span>;</span>\n    str <span>=</span> str<span>.</span><span>replace</span><span>(</span>reg<span>,</span> <span>''</span><span>)</span><span>;</span>\n    <span>return</span> str<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"第二题-购买通行证\"> 第二题 购买通行证</h2>\n<h3 id=\"描述-2\"> 描述</h3>\n<p>亚历克斯计划参观博物馆，并在柜台购买相同的通行证。管理员决定不出售团体通行证，一次只提供一张通行证。如果访客需要一张以上的通行证，他/她必须再次重新排队到柜台并购买下一张通行证。亚历克斯想购买许多通行证。访客顺序和每位访客需要的通行证数量是已知的，亚历克斯需要多少时间才能买到所有的通行证？Alex 在队列中的位置将被给定，每次交易需要 1 个时间单位。可以忽略每次转到行后面所需的时间。</p>\n<h3 id=\"样例-2\"> 样例</h3>\n<div><pre><code>输入: <span>arr</span><span>=</span><span>[</span><span>1,2</span>,5<span>]</span>,k<span>=</span><span>1</span>\n输出: <span>4</span>\n解释:\n有3个人 <span>0,1</span>,2 在排队。亚历克斯的编号是1\n第一个时间点，队列为0<span>(</span><span>1</span><span>)</span><span>&lt;</span>-1<span>(</span><span>2</span><span>)</span><span>&lt;</span>-2<span>(</span><span>5</span><span>)</span>，编号0获得门票。\n第二个时间点，队列为1<span>(</span><span>2</span><span>)</span><span>&lt;</span>-2<span>(</span><span>5</span><span>)</span> 亚克斯获得门票，并返回队伍最末端\n第三个时间点，队列为2<span>(</span><span>5</span><span>)</span><span>&lt;</span>-1<span>(</span><span>1</span><span>)</span> 编号2获得门票，并返回队伍最末端\n第四个时间点，队列为1<span>(</span><span>1</span><span>)</span><span>&lt;</span>-2<span>(</span><span>4</span><span>)</span> 亚克斯获得门票，他已经买到了所需要的所有门票\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"代码-2\"> 代码</h3>\n<p>这道题一开始没看懂，后来看懂了有思路但没做出来，结束后又花了点时间去做，最简陋的实现，时间复杂度没眼看</p>\n<div><pre><code><span>buyPasses</span><span>(</span><span>arr<span>,</span> k</span><span>)</span> <span>{</span>\n    <span>let</span> time <span>=</span> <span>0</span><span>;</span>\n    <span>let</span> i <span>=</span> <span>0</span><span>;</span>\n    <span>while</span> <span>(</span><span>1</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>arr<span>[</span>i<span>]</span><span>)</span> <span>{</span>\n            arr<span>[</span>i<span>]</span><span>--</span><span>;</span>\n            time<span>++</span><span>;</span>\n            <span>if</span> <span>(</span>i <span>===</span> k <span>&amp;&amp;</span> <span>!</span>arr<span>[</span>i<span>]</span><span>)</span> <span>{</span>\n                <span>return</span> time<span>;</span>\n            <span>}</span>\n        <span>}</span>\n        i<span>++</span><span>;</span>\n        <span>if</span> <span>(</span>i <span>===</span> arr<span>.</span>length<span>)</span> <span>{</span>\n            i <span>=</span> <span>0</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> time<span>;</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>下面是题解中的做法，没看懂……</p>\n<div><pre><code><span>buyPasses</span><span>(</span><span>arr<span>,</span> k</span><span>)</span> <span>{</span>\n    <span>let</span> time <span>=</span> <span>0</span><span>;</span>\n    arr<span>.</span><span>forEach</span><span>(</span><span>(</span><span>el<span>,</span> i</span><span>)</span> <span>=></span> <span>{</span>\n        <span>if</span><span>(</span>i <span>&lt;=</span> k<span>)</span> <span>{</span>\n            time <span>+=</span> el <span>></span>　arr<span>[</span>k<span>]</span> <span>?</span> arr<span>[</span>k<span>]</span> <span>:</span> el<span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            time <span>+=</span> el <span>></span>　arr<span>[</span>k<span>]</span><span>-</span><span>1</span> <span>?</span> arr<span>[</span>k<span>]</span><span>-</span><span>1</span> <span>:</span> el<span>;</span>\n        <span>}</span>\n    <span>}</span><span>)</span><span>;</span>\n    <span>return</span> time<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"第三题-寻找峰值\"> 第三题 寻找峰值</h2>\n<h3 id=\"描述-3\"> 描述</h3>\n<p>给定一个整数数组(size 为<code>n</code>)，其具有以下特点：</p>\n<ul>\n<li>相邻位置的数字是不同的</li>\n<li><code>A[0] &lt; A[1]</code> 并且 <code>A[n - 2] &gt; A[n - 1]</code></li>\n</ul>\n<p>假定<em>P</em>是峰值的位置则满足<code>A[P] &gt; A[P-1]</code>且<code>A[P] &gt; A[P+1]</code>，返回数组中任意一个峰值的位置。</p>\n<ul>\n<li>数组保证至少存在一个峰</li>\n<li>如果数组存在多个峰，返回其中任意一个就行</li>\n<li>数组至少包含 3 个数</li>\n</ul>\n<h3 id=\"样例-3\"> 样例</h3>\n<div><pre><code>输入：A <span>=</span> <span>[</span><span>1</span>, <span>2</span>, <span>1</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>7</span>, <span>6</span><span>]</span>\n输出：1\n解释：返回任意一个峰顶元素的下标，6也同样正确。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"代码-3\"> 代码</h3>\n<p>这是最直观的实现，时间复杂度还是比较高</p>\n<div><pre><code><span>findPeak</span><span>(</span><span><span>A</span></span><span>)</span> <span>{</span>\n    <span>for</span><span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> <span>A</span><span>.</span>length<span>-</span><span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        <span>if</span><span>(</span><span>A</span><span>[</span>i<span>]</span> <span>></span> <span>A</span><span>[</span>i<span>-</span><span>1</span><span>]</span> <span>&amp;&amp;</span> <span>A</span><span>[</span>i<span>]</span> <span>></span> <span>A</span><span>[</span>i<span>+</span><span>1</span><span>]</span> <span>)</span> <span>{</span>\n            <span>return</span> i<span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"第四题-数组划分\"> 第四题 数组划分</h2>\n<h3 id=\"描述-4\"> 描述</h3>\n<p>给出一个整数数组 <code>nums</code> 和一个整数 <code>k</code>。划分数组（即移动数组 <code>nums</code> 中的元素），使得：</p>\n<ul>\n<li>所有小于<code>k</code>的元素移到左边</li>\n<li>所有大于等于<code>k</code>的元素移到右边</li>\n</ul>\n<p>返回数组划分的位置，即数组中第一个位置 <code>i</code>，满足 <code>nums[i]</code> 大于等于 <code>k</code>。</p>\n<h3 id=\"样例-4\"> 样例</h3>\n<div><pre><code>输入：nums <span>=</span> <span>[</span><span>]</span>, k <span>=</span> <span>9</span>\n输出：0\n解释：空数组，输出0\n\n输入：nums <span>=</span> <span>[</span><span>3,2</span>,2,1<span>]</span>, k <span>=</span> <span>2</span>\n输出：1\n解释：真实的数组为<span>[</span><span>1,2</span>,2,3<span>]</span>.所以返回 <span>1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"代码-4\"> 代码</h3>\n<p>题目要求真正的划分数组，而不是仅仅计算比<code>k</code>小的整数，也不难，把<code>&gt;=k</code>的数<code>push</code>到另一个数组，最后在合并就好了</p>\n<div><pre><code><span>partitionArray</span><span>(</span><span>nums<span>,</span> k</span><span>)</span> <span>{</span>\n    <span>let</span> small <span>=</span> <span>[</span><span>]</span><span>;</span>\n    <span>if</span><span>(</span>nums<span>.</span>length<span>)</span> <span>{</span>\n        nums<span>.</span><span>forEach</span><span>(</span><span>el</span> <span>=></span> <span>{</span>\n            <span>if</span><span>(</span>el <span>&lt;</span> k<span>)</span> <span>{</span>\n                small<span>.</span><span>push</span><span>(</span>el<span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span><span>)</span><span>;</span>\n        <span>return</span> small<span>.</span>length<span>;</span>\n    <span>}</span>\n    <span>return</span> <span>0</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>也可以先排序<code>sort</code>，如何使用<code>indexOf</code>查找 k 也行</p>\n<div><pre><code><span>partitionArray</span><span>(</span><span>nums<span>,</span> k</span><span>)</span> <span>{</span>\n    <span>if</span><span>(</span>nums<span>.</span>length<span>)</span> <span>{</span>\n        nums<span>.</span><span>sort</span><span>(</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> a <span>-</span> b<span>)</span><span>;</span>\n        <span>if</span><span>(</span>k <span>&lt;</span> nums<span>[</span><span>0</span><span>]</span><span>)</span> <span>{</span>\n            <span>return</span> <span>0</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span><span>(</span>k <span>></span> nums<span>[</span>nums<span>.</span>length<span>-</span><span>1</span><span>]</span><span>)</span> <span>{</span>\n            <span>return</span> nums<span>.</span>length<span>;</span>\n        <span>}</span>\n        <span>let</span> index <span>=</span> nums<span>.</span><span>indexOf</span><span>(</span>k<span>)</span><span>;</span>\n        <span>if</span><span>(</span>index <span>===</span> nums<span>.</span>length<span>-</span><span>1</span><span>)</span> <span>{</span>\n            <span>return</span> <span>0</span><span>;</span>\n        <span>}</span>\n        <span>return</span> index<span>;</span>\n    <span>}</span>\n    <span>return</span> <span>0</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div>",
      "date_published": "2021-09-29T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.706Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "笔试"
      ]
    },
    {
      "title": "Vue学习记录",
      "url": "https://amschen.cn/articles/2020-08-17/Vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/",
      "id": "https://amschen.cn/articles/2020-08-17/Vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/",
      "content_html": "<h2 id=\"基本使用\"> 基本使用</h2>\n<ol>\n<li>\n<p>引入vue.js</p>\n</li>\n<li>\n<p>创建vue对象</p>\n<p>el：指定根element（选择器）</p>\n<p>data：初始化数据（页面可以访问）</p>\n</li>\n<li>\n<p>双向数据绑定：v-model</p>\n</li>\n<li>\n<p>显示数据：{{xxx}}</p>\n</li>\n<li>\n<p>理解vue的mvvm实现</p>\n<ul>\n<li>\n<p>MVVM：</p>\n<ul>\n<li>model：模型，数据对象（data）</li>\n<li>view：视图，模板页面</li>\n<li>viewModel：视图模型（vue的实例）</li>\n</ul>\n</li>\n<li>\n<p>DOM Listeners\t事件监听</p>\n</li>\n<li>\n<p>Data Bindings      数据绑定</p>\n</li>\n</ul>\n</li>\n</ol>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span>\n\t<span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>></span></span>\n    <span><span><span>&lt;</span>p</span><span>></span></span>hello<span><span><span>&lt;/</span>p</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>vue-master\\dist\\vue.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>//创建vue实例</span>\n<span>var</span> vm <span>=</span> <span>new</span> <span>Vue</span><span>(</span><span>{</span>    <span>//配置对象</span>\n    el<span>:</span> <span>'#app'</span><span>,</span>     <span>//element:选择器</span>\n    data<span>:</span> <span>{</span>     <span>//数据（model）</span>\n        username<span>:</span><span>'ASSSS'</span>\n          <span>}</span>\n<span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id=\"模板语法\"> 模板语法</h2>\n<h3 id=\"双大括号表达式\"> 双大括号表达式(( ))</h3>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>p</span><span>></span></span>{{msg}}<span><span><span>&lt;/</span>p</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span><span>></span></span>{{msg.toUpperCase()}}<span><span><span>&lt;/</span>p</span><span>></span></span>\t<span>&lt;!--全部大写函数--></span>\n    <span><span><span>&lt;</span>p</span> <span>v-text</span><span>></span></span>{{msg}}<span><span><span>&lt;/</span>p</span><span>></span></span>\t<span>&lt;!--解释为文本内容--></span>\n\t<span><span><span>&lt;</span>p</span> <span>v-html</span><span>></span></span>{{msg}}<span><span><span>&lt;/</span>p</span><span>></span></span>\t<span>&lt;!--解释为标签--></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>vue-master\\dist\\vue.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>//创建vue实例</span>\n\t<span>new</span> <span>Vue</span><span>(</span><span>{</span> <span>//配置对象</span>\n        el<span>:</span> <span>'#app'</span><span>,</span> <span>//element:选择器</span>\n        data<span>:</span> <span>{</span> <span>//数据（model）</span>\n            msg<span>:</span> <span>''</span><span>,</span>\n            \n        <span>}</span>\n   <span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"指令1-强制数据绑定\"> 指令1：强制数据绑定</h3>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span>\n\t<span><span><span>&lt;</span>img</span> <span><span>v-bind:</span>src</span><span><span>=</span><span>\"</span>imgUrl<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>img</span> <span>:src</span><span><span>=</span><span>\"</span>imgUrl<span>\"</span></span><span>></span></span>\t\t<span>&lt;!--简洁写法--></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>vue-master\\dist\\vue.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n\t<span>//创建vue实例</span>\n    <span>new</span> <span>Vue</span><span>(</span><span>{</span> <span>//配置对象</span>\n        el<span>:</span> <span>'#app'</span><span>,</span> <span>//element:选择器</span>\n        data<span>:</span> <span>{</span> <span>//数据（model）</span>\n        imgUrl<span>:</span> <span>'https://cn.vuejs.org/images/logo.png'</span>\n        <span>}</span>\n    <span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id=\"指令2-绑定事件监听\"> 指令2：绑定事件监听</h3>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span>\n\t<span><span><span>&lt;</span>button</span> <span><span>v-on:</span>click</span><span><span>=</span><span>\"</span>test<span>\"</span></span><span>></span></span>test1<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>test<span>\"</span></span><span>></span></span>test1<span><span><span>&lt;/</span>button</span><span>></span></span>   <span>&lt;!--简洁写法--></span>\n    <span>&lt;!--test函数的传参可写可不写--></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>vue-master\\dist\\vue.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n\t<span>//创建vue实例</span>\n    <span>new</span> <span>Vue</span><span>(</span><span>{</span> <span>//配置对象</span>\n        el<span>:</span> <span>'#app'</span><span>,</span> <span>//element:选择器</span>\n        ata<span>:</span> <span>{</span> <span>//数据（model）</span>\n\n        <span>}</span><span>,</span>\n        methods<span>:</span> <span>{</span>\n        \t<span>test</span><span>(</span><span>)</span> <span>{</span>\n            \t<span>alert</span><span>(</span><span>\"hello\"</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n\t<span>}</span><span>)</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id=\"计算属性和监听\"> 计算属性和监听</h2>\n<h3 id=\"计算属性\"> 计算属性</h3>\n<ul>\n<li>在computed属性对象中定义计算属性的方法，在页面中使用<code>{{方法名}}</code>来显示计算结果</li>\n</ul>\n<h3 id=\"监听属性\"> 监听属性</h3>\n<ul>\n<li>通过vm对象的$watch()或watch配置来监听指定的属性，当属性变化时，回调函数自动调用，在函数内部进行计算</li>\n</ul>\n<h3 id=\"计算属性高级\"> 计算属性高级</h3>\n<ul>\n<li>\n<p>通过getter/setter实现对属性数据的显示和监听，计算属性存在缓存，当次读取只执行一次getter计算</p>\n</li>\n<li>\n<p>getter:属性的get方法</p>\n</li>\n<li>\n<p>setter:属性的set方法</p>\n</li>\n</ul>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    姓：<span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>placeholder</span><span><span>=</span><span>\"</span>fn<span>\"</span></span> <span>v-model</span><span><span>=</span><span>\"</span>firstName<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>br</span><span>></span></span> \n    名：<span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>placeholder</span><span><span>=</span><span>\"</span>ln<span>\"</span></span> <span>v-model</span><span><span>=</span><span>\"</span>lastName<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>br</span><span>></span></span>\n    姓名1(单向)：<span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>placeholder</span><span><span>=</span><span>\"</span>fullName1<span>\"</span></span> <span>v-model</span><span><span>=</span><span>\"</span>fullName1<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>br</span><span>></span></span>\n    姓名2(单向)：<span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>placeholder</span><span><span>=</span><span>\"</span>fullName2<span>\"</span></span> <span>v-model</span><span><span>=</span><span>\"</span>fullName2<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>br</span><span>></span></span>\n    姓名3(双向)：<span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>placeholder</span><span><span>=</span><span>\"</span>fullName3<span>\"</span></span> <span>v-model</span><span><span>=</span><span>\"</span>fullName3<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>br</span><span>></span></span>\n\t<span><span><span>&lt;</span>p</span><span>></span></span>{{fullName1}}<span><span><span>&lt;/</span>p</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span><span>></span></span>{{fullName2}}<span><span><span>&lt;/</span>p</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span><span>></span></span>{{fullName3}}<span><span><span>&lt;/</span>p</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>vue-master\\dist\\vue.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n  <span>new</span> <span>Vue</span><span>(</span><span>{</span>\n    el<span>:</span> <span>'#demo'</span><span>,</span>\n    data<span>:</span> <span>{</span>\n        firstName<span>:</span> <span>'s'</span><span>,</span>\n        lastName<span>:</span> <span>'a'</span><span>,</span>\n        <span>//fullName1: 's a',</span>\n        fullName2<span>:</span> <span>'s a'</span><span>,</span>\n        <span>//fullName3: 's a'</span>\n    <span>}</span><span>,</span>\n    computed<span>:</span> <span>{</span>\n    <span>//执行条件：初始化显示/相关data属性数据发生改变</span>\n\t  <span>fullName1</span><span>(</span><span>)</span> <span>{</span> <span>//计算属性中的一个方法,方法返回值作为属性值</span>\n        <span>return</span> <span>this</span><span>.</span>firstName <span>+</span> <span>' '</span> <span>+</span> <span>this</span><span>.</span>lastName\n      <span>}</span><span>,</span>\n      fullName3<span>:</span> <span>{</span>\n<span>//回调函数 当读取当前属性值时回调 根据相关数据计算并返回当前属性值</span>\n\t    <span>get</span><span>(</span><span>)</span> <span>{</span>\n          <span>return</span> <span>this</span><span>.</span>firstName <span>+</span> <span>' '</span> <span>+</span> <span>this</span><span>.</span>lastName\n        <span>}</span><span>,</span>\n<span>//回调函数 监听当前属性值的变化 当属性值发生改变时回调 更新相关的属性数据</span>\n\t\t<span>set</span><span>(</span>value<span>)</span> <span>{</span> <span>//value就是fullName的最新属性值</span>\n          <span>const</span> names <span>=</span> value<span>.</span><span>split</span><span>(</span><span>' '</span><span>)</span>\n          <span>this</span><span>.</span>firstName <span>=</span> names<span>[</span><span>0</span><span>]</span>\n          <span>this</span><span>.</span>lastName <span>=</span> names<span>[</span><span>1</span><span>]</span>\n        <span>}</span>\n      <span>}</span>\n    <span>}</span><span>,</span>\n    watch<span>:</span> <span>{</span> <span>//配置监听</span>\n      <span>firstName</span><span>:</span> <span>function</span><span>(</span><span>value</span><span>)</span> <span>{</span> <span>//firstName发生了变化</span>\n      <span>this</span><span>.</span>fullName2 <span>=</span> value <span>+</span> <span>' '</span> <span>+</span> <span>this</span><span>.</span>lastName\n      <span>}</span>\n    <span>}</span>\n  <span>}</span><span>)</span>\n  vm<span>.</span><span>$watch</span><span>(</span><span>'lastName'</span><span>,</span> <span>function</span><span>(</span><span>value</span><span>)</span> <span>{</span>\n    <span>//更新fullName2</span>\n    <span>this</span><span>.</span>fullName2 <span>=</span> <span>this</span><span>.</span>firstName <span>+</span> <span>' '</span> <span>+</span> value\n  <span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><h2 id=\"class和style绑定\"> class和style绑定</h2>\n<ul>\n<li>在应用界面中，某个元素的元素时变化的</li>\n<li>style/class绑定就是专门用来实现动态样式效果的技术</li>\n</ul>\n<h5 id=\"class绑定\"> class绑定</h5>\n<div><pre><code>:class <span>=</span> <span>'xxx'</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>xxx是字符串</li>\n<li>xxx是对象</li>\n<li>xxx是数组</li>\n</ul>\n<h5 id=\"style绑定\"> style绑定</h5>\n<div><pre><code>:style <span>=</span> <span>\"{color:activeColor, fontSize:fontSize + 'px'}\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>activeColor/fontSize是data属性</li>\n</ul>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n\t<span><span><span>&lt;</span>h3</span><span>></span></span>class绑定<span><span><span>&lt;/</span>h3</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span> <span>:class</span><span><span>=</span><span>\"</span>a<span>\"</span></span><span>></span></span>xxx是字符串<span><span><span>&lt;/</span>p</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span> <span>:class</span><span><span>=</span><span>\"</span>{aClass:isA, bClass:isB}<span>\"</span></span><span>></span></span>xxx是对象<span><span><span>&lt;/</span>p</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span> <span>:class</span><span><span>=</span><span>\"</span>cssArr<span>\"</span></span><span>></span></span>xxx是数组<span><span><span>&lt;/</span>p</span><span>></span></span>\n    \n\t<span><span><span>&lt;</span>h3</span><span>></span></span>style绑定<span><span><span>&lt;/</span>h3</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span> <span>:style</span><span><span>=</span><span>\"</span>{color:activeColor, fontSize:fontSize + <span>'</span>px<span>'</span>}<span>\"</span></span><span>></span></span>style<span><span><span>&lt;/</span>p</span><span>></span></span>\n\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>update<span>\"</span></span><span>></span></span>更新<span><span><span>&lt;/</span>button</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>vue-master/dist/vue.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span><span>></span></span><span><span>\n\t<span>new</span> <span>Vue</span><span>(</span><span>{</span>\n    \tel<span>:</span> <span>'#demo'</span><span>,</span>\n        data<span>:</span> <span>{</span>\n        \ta<span>:</span> <span>'aClass'</span><span>,</span>\n            \n            isA<span>:</span> <span>true</span><span>,</span>\n            isB<span>:</span> <span>false</span><span>,</span>\n            \n            cssArr<span>:</span> <span>[</span><span>'aClass'</span><span>,</span> <span>'bClass'</span><span>]</span><span>,</span>\n            \n            activeColor<span>:</span> <span>'green'</span><span>,</span>\n            fontSize<span>:</span> <span>20</span>\n        <span>}</span><span>,</span>\n        methods<span>:</span> <span>{</span>\n        \t<span>update</span><span>(</span><span>)</span> <span>{</span>\n            \t<span>this</span><span>.</span>a <span>=</span> <span>'bClass'</span>\n                \n                <span>this</span><span>.</span>isA <span>=</span> <span>false</span>\n                <span>this</span><span>.</span>isB <span>=</span> <span>true</span>\n                \n                <span>this</span><span>.</span>cssArr <span>=</span> <span>[</span><span>'aClass'</span><span>]</span>\n                \n                <span>this</span><span>.</span>activeColor <span>=</span> <span>'blue'</span>\n                <span>this</span><span>.</span>fontSize <span>=</span> <span>12</span>\n            <span>}</span>\n        <span>}</span>\n\t<span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><h2 id=\"条件渲染\"> 条件渲染</h2>\n<h3 id=\"渲染指令\"> 渲染指令</h3>\n<ul>\n<li>v-if</li>\n<li>v-else</li>\n<li>v-show</li>\n</ul>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n\t<span><span><span>&lt;</span>p</span> <span>v-if</span><span><span>=</span><span>\"</span>ok<span>\"</span></span><span>></span></span>成功了<span><span><span>&lt;/</span>p</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span> <span>v-else</span><span>></span></span>失败了<span><span><span>&lt;/</span>p</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span> <span>v-show</span><span><span>=</span><span>\"</span>ok<span>\"</span></span><span>></span></span>表白成功<span><span><span>&lt;/</span>p</span><span>></span></span>\n    <span><span><span>&lt;</span>p</span> <span>v-show</span><span><span>=</span><span>\"</span>!ok<span>\"</span></span><span>></span></span>表白失败<span><span><span>&lt;/</span>p</span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>ok=!ok<span>\"</span></span><span>></span></span>切换<span><span><span>&lt;/</span>button</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>vue-master/dist/vue.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span><span>></span></span><span><span>\n\t<span>new</span> <span>Vue</span><span>(</span><span>{</span>\n    \tel<span>:</span> <span>'#demo'</span><span>,</span>\n        data<span>:</span> <span>{</span>\n        \tok<span>:</span> <span>false</span><span>,</span>\n        <span>}</span>\n    <span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"v-if-else和v-show的区别\"> v-if/else和v-show的区别</h3>\n<ul>\n<li>\n<p>v-if/else渲染时会把需要隐藏的标签直接去除</p>\n</li>\n<li>\n<p>v-show渲染时只是给需要隐藏的标签加上隐藏的内联样式属性</p>\n</li>\n</ul>\n<p><img src=\"./images/1.png\" alt=\"\" /></p>\n<h2 id=\"列表渲染\"> 列表渲染</h2>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n\t<span><span><span>&lt;</span>h3</span><span>></span></span>测试：v-for 遍历数组<span><span><span>&lt;/</span>h3</span><span>></span></span>\n\t<span><span><span>&lt;</span>ul</span><span>></span></span>\n    \t<span><span><span>&lt;</span>li</span> <span>v-for</span><span><span>=</span><span>\"</span>(p, index) in persons<span>\"</span></span> <span>:key</span><span><span>=</span><span>\"</span>index<span>\"</span></span><span>></span></span>\n    \t\t{{index}}----{{p.name}}----{{p.age}}\n        \t----<span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>deletePerson(index)<span>\"</span></span><span>></span></span>删除\t\t\t   <span><span><span>&lt;/</span>button</span><span>></span></span>\n        \t----<span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>updatePerson(index,\t\t\t\t\t{name:<span>'</span>cat<span>'</span>,age:10})<span>\"</span></span><span>></span></span>更新<span><span><span>&lt;/</span>button</span><span>></span></span>\n    \t<span><span><span>&lt;/</span>li</span><span>></span></span>\n    <span><span><span>&lt;/</span>ul</span><span>></span></span>\n\n\t<span><span><span>&lt;</span>h3</span><span>></span></span>测试：v-for 遍历对象<span><span><span>&lt;/</span>h3</span><span>></span></span>\n        <span><span><span>&lt;</span>ul</span><span>></span></span>\n            <span><span><span>&lt;</span>li</span> <span>v-for</span><span><span>=</span><span>\"</span>(value, key) in persons<span>\"</span></span> \t\t\t\t\t<span>:key</span><span><span>=</span><span>\"</span>key<span>\"</span></span><span>></span></span>\n                {{key}}----{{value}}\n            <span><span><span>&lt;/</span>li</span><span>></span></span>\n        <span><span><span>&lt;/</span>ul</span><span>></span></span>\n        <span><span><span>&lt;</span>ul</span><span>></span></span>\n            <span><span><span>&lt;</span>li</span> <span>v-for</span><span><span>=</span><span>\"</span>(value, key) in persons[0]<span>\"</span></span> \t\t\t\t\t<span>:key</span><span><span>=</span><span>\"</span>key<span>\"</span></span><span>></span></span>\n                {{key}}----{{value}}\n            <span><span><span>&lt;/</span>li</span><span>></span></span>\n        <span><span><span>&lt;/</span>ul</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>vue-master/dist/vue.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>\"</span>text/javascript<span>\"</span></span><span>></span></span><span><span>\n\t<span>new</span> <span>Vue</span><span>(</span><span>{</span>\n    \tel<span>:</span> <span>'#demo'</span><span>,</span>\n        data<span>:</span> <span>{</span>\n        <span>//vue只是监听了persons的改变，没有监听数组内部的变化</span>\n\t\t<span>//vue重写了数组中的一系列改变数组内部数据的方法(先调用原\t\t\t  生，再更新界面)</span>\n        \tpersons<span>:</span> <span>[</span>\n            \t<span>{</span>name<span>:</span> <span>'Tom'</span><span>,</span>age<span>:</span> <span>18</span><span>}</span><span>,</span> \n            \t<span>{</span>name<span>:</span> <span>'Jack'</span><span>,</span>age<span>:</span> <span>19</span><span>}</span><span>,</span>\n            \t<span>{</span>name<span>:</span> <span>'Bobe'</span><span>,</span>age<span>:</span> <span>15</span><span>}</span><span>,</span> \n            \t<span>{</span>name<span>:</span> <span>'Rose'</span><span>,</span>age<span>:</span> <span>20</span><span>}</span>\n        \t<span>]</span>\n        <span>}</span><span>,</span>\n        methods<span>:</span> <span>{</span>\n        \t<span>deletePerson</span><span>(</span><span>index</span><span>)</span> <span>{</span>\n            \t<span>this</span><span>.</span>persons<span>.</span><span>splice</span><span>(</span>index<span>,</span> <span>1</span><span>)</span>\n            <span>}</span><span>,</span>\n            <span>updatePerson</span><span>(</span><span>index<span>,</span> newPerson</span><span>)</span> <span>{</span>\n<span>//没有改变persons本身,数组内部数据改变，但是没有调用变异方法，因此界面没有发生改变</span>\n            \t<span>//this.persons[index] = newPerson </span>\n                <span>this</span><span>.</span>persons<span>.</span><span>splice</span><span>(</span>index<span>,</span> <span>1</span><span>,</span> newPerson<span>)</span>\n            <span>}</span>\n        <span>}</span>\n\t<span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><h2 id=\"列表的搜索和排序\"> 列表的搜索和排序</h2>\n",
      "date_published": "2020-08-17T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.747Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "手撕发布-订阅模式",
      "url": "https://amschen.cn/articles/2021-10-04/%E6%89%8B%E6%92%95%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/",
      "id": "https://amschen.cn/articles/2021-10-04/%E6%89%8B%E6%92%95%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/",
      "content_html": "<h2 id=\"简述\"> 简述</h2>\n<p>发布-订阅模式将订阅者和发布者解耦，订阅者不用一直“询问”发布者事件是否发生，而是由发布者自由决定向订阅者发送通知。</p>\n<h2 id=\"实现\"> 实现</h2>\n<p>以购物为例，买家需要向卖家购买一件商品，但是库存已经没有了，买家想要知道什么时候有货，那么买家需要隔一段时间就去问卖家有没有货，如果采用了发布-订阅模式，买家只需要将联系方式留给卖家，当卖家进货时，有卖家统一通知买家，从而减少查询次数。</p>\n<h3 id=\"初步实现\"> 初步实现</h3>\n<h4 id=\"代码\"> 代码</h4>\n<div><pre><code><span>class</span> <span>Shop</span> <span>{</span>\n    <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n        <span>this</span><span>.</span>repository <span>=</span> <span>{</span><span>}</span><span>;</span>\n    <span>}</span>\n    <span>// 订阅</span>\n    <span>$on</span><span>(</span><span>goods<span>,</span> callback</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>repository<span>[</span>goods<span>]</span><span>)</span> <span>{</span>\n            <span>this</span><span>.</span>repository<span>[</span>goods<span>]</span> <span>=</span> <span>[</span><span>]</span><span>;</span>\n        <span>}</span>\n        <span>this</span><span>.</span>repository<span>[</span>goods<span>]</span><span>.</span><span>push</span><span>(</span>callback<span>)</span><span>;</span>\n    <span>}</span>\n    <span>// 发布</span>\n    <span>$emit</span><span>(</span><span>goods</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>this</span><span>.</span>repository<span>[</span>goods<span>]</span> <span>&amp;&amp;</span> <span>this</span><span>.</span>repository<span>[</span>goods<span>]</span><span>.</span>length<span>)</span> <span>{</span>\n            <span>this</span><span>.</span>repository<span>[</span>goods<span>]</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>cb</span><span>)</span> <span>=></span> <span>cb</span><span>(</span>goods<span>)</span><span>)</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            console<span>.</span><span>log</span><span>(</span><span>'该商品没有客户订阅'</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>// 取消订阅</span>\n    <span>$removeSubscribe</span><span>(</span><span>goods<span>,</span> callback</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>this</span><span>.</span>repository<span>[</span>goods<span>]</span><span>)</span> <span>{</span>\n            <span>this</span><span>.</span>repository<span>[</span>goods<span>]</span> <span>=</span> <span>this</span><span>.</span>repository<span>[</span>goods<span>]</span><span>.</span><span>filter</span><span>(</span>\n                <span>(</span><span>cb</span><span>)</span> <span>=></span> cb <span>!=</span> callback\n            <span>)</span><span>;</span>\n            console<span>.</span><span>log</span><span>(</span><span>'取消订阅成功'</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>// 一次性订阅</span>\n    <span>$once</span><span>(</span><span>goods<span>,</span> callback</span><span>)</span> <span>{</span>\n        <span>let</span> <span>fn</span> <span>=</span> <span>(</span><span>goods</span><span>)</span> <span>=></span> <span>{</span>\n            <span>callback</span><span>(</span>goods<span>)</span><span>;</span>\n            <span>this</span><span>.</span><span>$removeSubscribe</span><span>(</span>goods<span>,</span> fn<span>)</span><span>;</span>\n        <span>}</span><span>;</span>\n        <span>this</span><span>.</span><span>$on</span><span>(</span>goods<span>,</span> fn<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span>var</span> shop <span>=</span> <span>new</span> <span>Shop</span><span>(</span><span>)</span><span>;</span>\nshop<span>.</span><span>$on</span><span>(</span><span>'电脑'</span><span>,</span> <span>function</span><span>(</span><span>goods</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span>goods<span>}</span></span><span>货到啦！</span><span>`</span></span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\nshop<span>.</span><span>$once</span><span>(</span><span>'鼠标'</span><span>,</span> <span>function</span><span>(</span><span>goods</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span>goods<span>}</span></span><span>货到啦！</span><span>`</span></span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\nshop<span>.</span><span>$emit</span><span>(</span><span>'电脑'</span><span>)</span><span>;</span>\nshop<span>.</span><span>$emit</span><span>(</span><span>'鼠标'</span><span>)</span><span>;</span>\nshop<span>.</span><span>$emit</span><span>(</span><span>'鼠标'</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><h4 id=\"输出\"> 输出</h4>\n<div><pre><code>电脑货到啦！\n鼠标货到啦！\n取消订阅成功\n该商品没有客户订阅\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这里只是初步实现，还有很多地方需要完善。</p>\n<h3 id=\"实现订阅一组事件\"> 实现订阅一组事件</h3>\n<p>只需要修改<code>$on</code>函数即可</p>\n<div><pre><code><span>$on</span><span>(</span><span>goods<span>,</span> callback</span><span>)</span> <span>{</span>\n    <span>if</span><span>(</span>Array<span>.</span><span>isArray</span><span>(</span>goods<span>)</span><span>)</span> <span>{</span>\n        goods<span>.</span><span>forEach</span><span>(</span><span>goodsName</span> <span>=></span> <span>{</span>\n            <span>this</span><span>.</span><span>_push</span><span>(</span>goodsName<span>,</span> callback<span>)</span><span>;</span>\n        <span>}</span><span>)</span>\n    <span>}</span> <span>else</span> <span>{</span>\n        <span>this</span><span>.</span><span>_push</span><span>(</span>goods<span>,</span> callback<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span>_push</span><span>(</span><span>goods<span>,</span> callback</span><span>)</span> <span>{</span>\n\t<span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>repository<span>[</span>goods<span>]</span><span>)</span> <span>{</span>\n\t\t<span>this</span><span>.</span>repository<span>[</span>goods<span>]</span> <span>=</span> <span>[</span><span>]</span><span>;</span>\n\t<span>}</span>\n\t<span>this</span><span>.</span>repository<span>[</span>goods<span>]</span><span>.</span><span>push</span><span>(</span>callback<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div>",
      "date_published": "2021-10-04T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.757Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "设计模式"
      ]
    },
    {
      "title": "手撕观察者模式",
      "url": "https://amschen.cn/articles/2021-10-04/%E6%89%8B%E6%92%95%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",
      "id": "https://amschen.cn/articles/2021-10-04/%E6%89%8B%E6%92%95%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",
      "content_html": "<h2 id=\"简述\"> 简述</h2>\n<p>观察者模式指的是一个目标对象被多个观察者对象监听，当目标对象监听的属性发生变化时，主动向观察者发送通知。</p>\n<h2 id=\"实现\"> 实现</h2>\n<h3 id=\"es5\"> ES5</h3>\n<p>ES5 可以通过<code>Object.defineProperty</code>来设置<code>set</code>和<code>get</code>进行拦截来实现该模式。</p>\n<h4 id=\"代码\"> 代码</h4>\n<div><pre><code><span>var</span> observedObj <span>=</span> <span>{</span> _no<span>:</span> <span>1</span> <span>}</span><span>;</span>\n<span>var</span> observerObj <span>=</span> <span>{</span> _no<span>:</span> <span>1</span> <span>}</span><span>;</span>\n\n<span>function</span> <span>observer</span><span>(</span><span>oldVal<span>,</span> newVal</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'observed的no属性值变为'</span> <span>+</span> newVal<span>)</span><span>;</span>\n    observer<span>.</span>_no <span>=</span> newVal<span>;</span>\n<span>}</span>\n\nObject<span>.</span><span>defineProperty</span><span>(</span>observedObj<span>,</span> <span>'no'</span><span>,</span> <span>{</span>\n    <span>set</span><span>:</span> <span>function</span><span>(</span><span>newVal</span><span>)</span> <span>{</span>\n        <span>observer</span><span>(</span><span>this</span><span>.</span>_no<span>,</span> newVal<span>)</span><span>;</span>\n        <span>this</span><span>.</span>_no <span>=</span> newVal<span>;</span>\n    <span>}</span><span>,</span>\n    <span>get</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>this</span><span>.</span>_no<span>;</span>\n    <span>}</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n\nobservedObj<span>.</span>no <span>=</span> <span>2</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'observedObj: '</span><span>,</span> observedObj<span>,</span> <span>'\\nobserverObj: '</span><span>,</span> observerObj<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h4 id=\"输出\"> 输出</h4>\n<div><pre><code>observedObj的no属性值变为2\nobservedObj:  <span>{</span> _no: <span>2</span> <span>}</span>\nobserverObj:  <span>{</span> _no: <span>2</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"es6\"> ES6</h3>\n<p>使用 ES6 新特性 Proxy 和 Reflect 结合使用监听对象属性</p>\n<h4 id=\"代码-2\"> 代码</h4>\n<div><pre><code><span>class</span> <span>Obj</span> <span>{</span>\n    <span>constructor</span><span>(</span><span>no</span><span>)</span> <span>{</span>\n        <span>this</span><span>.</span>no <span>=</span> no<span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span>var</span> observedObj <span>=</span> <span>new</span> <span>Obj</span><span>(</span><span>1</span><span>)</span><span>;</span>\n<span>var</span> observerObj <span>=</span> <span>new</span> <span>Obj</span><span>(</span><span>1</span><span>)</span><span>;</span>\n\n<span>const</span> handler <span>=</span> <span>{</span>\n    <span>set</span><span>:</span> <span>function</span><span>(</span><span>observed<span>,</span> key<span>,</span> value</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>key <span>===</span> <span>'no'</span><span>)</span> <span>{</span>\n            <span>observer</span><span>(</span>key<span>,</span> observed<span>[</span>key<span>]</span><span>,</span> value<span>)</span><span>;</span>\n        <span>}</span>\n        Reflect<span>.</span><span>set</span><span>(</span>observed<span>,</span> key<span>,</span> value<span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>var</span> observerProxy <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>observedObj<span>,</span> handler<span>)</span><span>;</span>\n\n<span>function</span> <span>observer</span><span>(</span><span>key<span>,</span> oldVal<span>,</span> newVal</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>observedObj的no属性值由</span><span><span>${</span>oldVal<span>}</span></span><span>变为</span><span><span>${</span>newVal<span>}</span></span><span>`</span></span><span>)</span><span>;</span>\n    observerObj<span>[</span>key<span>]</span> <span>=</span> newVal<span>;</span>\n<span>}</span>\n\nobserverProxy<span>.</span>no <span>=</span> <span>2</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'observedObj: '</span><span>,</span> observedObj<span>,</span> <span>'\\nobserverObj: '</span><span>,</span> observerObj<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h4 id=\"输出-2\"> 输出</h4>\n<div><pre><code>observedObj的no属性值由1变为2\nobservedObj:  Obj <span>{</span> no: <span>2</span> <span>}</span>\nobserverObj:  Obj <span>{</span> no: <span>2</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2021-10-04T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.768Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "设计模式"
      ]
    },
    {
      "title": "手撕Promise",
      "url": "https://amschen.cn/articles/2021-10-07/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Promise/",
      "id": "https://amschen.cn/articles/2021-10-07/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Promise/",
      "content_html": "",
      "date_published": "2021-10-07T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.770Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "js"
      ]
    },
    {
      "title": "phpMyAdmin无法登录MySql8的问题",
      "url": "https://amschen.cn/articles/2021-10-16/phpMyAdmin%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95MySql8%E7%9A%84%E9%97%AE%E9%A2%98/",
      "id": "https://amschen.cn/articles/2021-10-16/phpMyAdmin%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95MySql8%E7%9A%84%E9%97%AE%E9%A2%98/",
      "content_html": "<p>数据库系统的实验课需要用到phpMyAdmin，正常安装和设置后尝试使用phpMyAdmin登录mysql，然后就出问题了😅</p>\n<p>如图</p>\n<p><img src=\"./images/1.png\" alt=\"image\" /></p>\n<p>通过github看到某个php相关项目的issue里面有提到这个问题，然后得知原因是php不支持<code>caching_sha2_password</code>的密码验证方式，所以得把mysql的验证方式改为老版本的--<code>mysql_native_password</code></p>\n<p>windows下使用管理员运行cmd，登录mysql后运行下面的命令修改密码验证方式即可</p>\n<div><pre><code>alter user <span>'username'</span>@<span>'localhost'</span> identified with mysql_native_password by <span>'password'</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p><img src=\"./images/2.png\" alt=\"image\" /></p>\n",
      "date_published": "2021-10-16T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.771Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "问题记录"
      ]
    },
    {
      "title": "mvvm原理实践",
      "url": "https://amschen.cn/articles/2021-10-06/mvvm%E5%8E%9F%E7%90%86%E5%AE%9E%E8%B7%B5/",
      "id": "https://amschen.cn/articles/2021-10-06/mvvm%E5%8E%9F%E7%90%86%E5%AE%9E%E8%B7%B5/",
      "content_html": "<h2 id=\"前言\"> 前言</h2>\n<p>原理部分不在叙述，网上很多博客都有提，我是在掘金看了别的博主的文章(<a href=\"https://juejin.cn/post/6844903586103558158\" target=\"_blank\" rel=\"noopener noreferrer\">不好意思！耽误你的十分钟，让 MVVM 原理还给你</a>)，然后按自己的理解模仿着实现了基础的 demo，在此基础上又添加了 methods、v-show 和@click 的实现。</p>\n<p>由于自己还没彻底消化，所以叙述会有点烂 😢，当成一个菜鸟的学习记录吧！下面提到的东西可能是有错误的 😓</p>\n<p>完整代码：<a href=\"https://github.com/vkm0303/mvvm\" target=\"_blank\" rel=\"noopener noreferrer\">github 传送门</a></p>\n<p>demo 演示：<a href=\"https://vkm0303.github.io/mvvm/demo.html\" target=\"_blank\" rel=\"noopener noreferrer\">demo 传送门</a></p>\n<h2 id=\"具体实现\"> 具体实现</h2>\n<h3 id=\"数据代理\"> 数据代理</h3>\n<p>这里主要是 data 和 methods 的代理，代理的目的很简单，在 Vue 中，我们可以直接使用 this.xxx 来访问数据，而数据代理就是达到该目的的实现之一。</p>\n<p>另外，如果 methods 里面的方法也能使用 this.xxx 来访问数据，那么还需要改变 method 的 this 指向，这里我写了个<code>_bind()</code>方法来实现</p>\n<div><pre><code><span>class</span> <span>MVVM</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>options <span>=</span> <span>{</span><span>}</span></span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>$options <span>=</span> options<span>;</span>\n    <span>this</span><span>.</span><span>_proxy</span><span>(</span>options<span>.</span>data<span>)</span><span>;</span>\n    <span>this</span><span>.</span><span>_proxy</span><span>(</span>options<span>.</span>methods<span>)</span><span>;</span>\n    <span>this</span><span>.</span><span>_bind</span><span>(</span>options<span>.</span>methods<span>)</span><span>;</span>\n  <span>}</span>\n  <span>// 将数据挂载到实例上，this代理options.data/methods，即可以直接使用this.key访问data的数据/methods的方法</span>\n  <span>_proxy</span><span>(</span><span>data</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>typeof</span> data <span>===</span> <span>\"object\"</span><span>)</span> <span>{</span>\n      <span>for</span> <span>(</span><span>let</span> key <span>in</span> data<span>)</span> <span>{</span>\n        Object<span>.</span><span>defineProperty</span><span>(</span><span>this</span><span>,</span> key<span>,</span> <span>{</span>\n          enumerable<span>:</span> <span>true</span><span>,</span> <span>// 可被枚举</span>\n          <span>set</span><span>:</span> <span>function</span><span>(</span><span>newVal</span><span>)</span> <span>{</span>\n            data<span>[</span>key<span>]</span> <span>=</span> newVal<span>;</span>\n          <span>}</span><span>,</span>\n          <span>get</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n            <span>return</span> data<span>[</span>key<span>]</span><span>;</span>\n          <span>}</span><span>,</span>\n        <span>}</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n  <span>// 改变methods里面的方法this指向</span>\n  <span>_bind</span><span>(</span><span>methods</span><span>)</span> <span>{</span>\n    <span>for</span> <span>(</span><span>let</span> key <span>in</span> methods<span>)</span> <span>{</span>\n      methods<span>[</span>key<span>]</span> <span>=</span> methods<span>[</span>key<span>]</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h3 id=\"数据劫持-订阅发布\"> 数据劫持 + 订阅发布</h3>\n<p>数据劫持是通过<code>Object.defineProperty()</code>方法来实现，用 ES6 的<code>Proxy</code>来实现也可，有时间再更新。</p>\n<p>这个模式好像是观察者+发布订阅的结合使用，不知道对不对，感觉是这样。</p>\n<p>关于这两个设计模式可以看一下我的另外两篇文章：<a href=\"https://www.amschen.cn/articles/2021-10-04/%E6%89%8B%E6%92%95%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/\" target=\"_blank\" rel=\"noopener noreferrer\">手撕观察者模式</a>、<a href=\"https://www.amschen.cn/articles/2021-10-04/%E6%89%8B%E6%92%95%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/\" target=\"_blank\" rel=\"noopener noreferrer\">手撕发布-订阅模式</a></p>\n<h4 id=\"dep\"> Dep</h4>\n<p>通过这个类是发布-订阅的具体实现</p>\n<div><pre><code><span>class</span> <span>Dep</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>subscribeObj <span>=</span> <span>{</span><span>}</span><span>;</span>\n  <span>}</span>\n\n  <span>subscribe</span><span>(</span><span>key<span>,</span> sub</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>subscribeObj<span>[</span>key<span>]</span> <span>=</span> sub<span>;</span>\n  <span>}</span>\n\n  <span>notify</span><span>(</span><span>key</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>subscribeObj<span>[</span>key<span>]</span><span>.</span><span>update</span><span>(</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h4 id=\"observer\"> Observer</h4>\n<p>这个类的作用主要是作为一个拦截器(数据劫持)，订阅数据，发布通知，数据的获取和修改都需要经过这里(不出意外的话</p>\n<div><pre><code><span>class</span> <span>Observer</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>data</span><span>)</span> <span>{</span>\n    <span>for</span> <span>(</span><span>let</span> key <span>in</span> data<span>)</span> <span>{</span>\n      <span>let</span> val <span>=</span> data<span>[</span>key<span>]</span><span>;</span>\n      <span>let</span> dep <span>=</span> <span>new</span> <span>Dep</span><span>(</span><span>)</span><span>;</span> <span>// 发布订阅类实例</span>\n      <span>this</span><span>.</span><span>_traverse</span><span>(</span>val<span>)</span><span>;</span> <span>// 递归遍历，深度劫持</span>\n      Object<span>.</span><span>defineProperty</span><span>(</span>data<span>,</span> key<span>,</span> <span>{</span>\n        enumerable<span>:</span> <span>true</span><span>,</span> <span>// 可被枚举</span>\n        <span>set</span><span>:</span> <span>function</span><span>(</span><span>newVal</span><span>)</span> <span>{</span>\n          <span>if</span> <span>(</span>val <span>!==</span> newVal<span>)</span> <span>{</span>\n            val <span>=</span> newVal<span>;</span>\n            dep<span>.</span><span>notify</span><span>(</span>key<span>)</span><span>;</span> <span>// 数据更新，通知订阅者</span>\n            <span>return</span> newVal<span>;</span>\n          <span>}</span>\n        <span>}</span><span>,</span>\n        <span>get</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n          Dep<span>.</span>target <span>&amp;&amp;</span> dep<span>.</span><span>subscribe</span><span>(</span>key<span>,</span> Dep<span>.</span>target<span>)</span><span>;</span> <span>// 增加订阅者，监听数据</span>\n          <span>return</span> val<span>;</span>\n        <span>}</span><span>,</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n  <span>_traverse</span><span>(</span><span>data</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>data <span>&amp;&amp;</span> <span>typeof</span> data <span>===</span> <span>\"object\"</span><span>)</span> <span>{</span>\n      <span>return</span> <span>new</span> <span>Observer</span><span>(</span>data<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h4 id=\"watcher\"> Watcher</h4>\n<p>监听者，<code>update</code>函数就是用来更新数据的</p>\n<div><pre><code><span>class</span> <span>Watcher</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>vm<span>,</span> exp<span>,</span> cb</span><span>)</span> <span>{</span>\n    <span>// 实例本身，模板键值(如v-model=\"obj.key\"的obj.key)，回调函数</span>\n    <span>this</span><span>.</span>vm <span>=</span> vm<span>;</span>\n    <span>this</span><span>.</span>exp <span>=</span> exp<span>;</span>\n    <span>this</span><span>.</span>cb <span>=</span> cb<span>;</span>\n    Dep<span>.</span>target <span>=</span> <span>this</span><span>;</span>\n    <span>let</span> val <span>=</span> vm<span>;</span>\n    exp<span>.</span><span>split</span><span>(</span><span>\".\"</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n      val <span>=</span> val<span>[</span>key<span>]</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n  <span>}</span>\n  <span>update</span><span>(</span><span>)</span> <span>{</span>\n    <span>let</span> val <span>=</span> <span>this</span><span>.</span>vm<span>;</span>\n    <span>this</span><span>.</span>exp<span>.</span><span>split</span><span>(</span><span>\".\"</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n      val <span>=</span> val<span>[</span>key<span>]</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n    <span>this</span><span>.</span>vm<span>.</span>vShow<span>.</span><span>forEach</span><span>(</span><span>(</span><span>obj</span><span>)</span> <span>=></span> <span>{</span>  <span>// 检查vShow数组里面存储的v-show指令绑定值的状态</span>\n      obj<span>.</span>node<span>.</span>style<span>.</span>display <span>=</span> <span>this</span><span>.</span>vm<span>[</span>obj<span>.</span>key<span>]</span> <span>?</span> <span>\"\"</span> <span>:</span> <span>\"none\"</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n    <span>this</span><span>.</span><span>cb</span><span>(</span>val<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h3 id=\"数据编译\"> 数据编译</h3>\n<p>数据的更新啥的都弄好了，下面就得进行最后一步数据渲染了！</p>\n<p>下面节点的更新有用到<code>DocumentFragment</code>，这里稍微偏一下题，使用<code>DocumentFragment</code>来来临时存储节点是有性能优化的作用的，比如下面的节点更新，如果一个一个节点的插入到DOM树中，就会有大量的DOM操作，引起多次的重绘和重排，从而影响到渲染的性能，将需要更新的节点存放到<code>DocumentFragment</code>中，最后再一次性更新，只有一次DOM操作，因此这里使用<code>DocumentFragment</code>是有原因滴~</p>\n<div><pre><code><span>class</span> <span>Compile</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>el<span>,</span> vm</span><span>)</span> <span>{</span>\n    vm<span>.</span>$el <span>=</span> document<span>.</span><span>querySelector</span><span>(</span>el<span>)</span><span>;</span>\n    <span>let</span> fragment <span>=</span> document<span>.</span><span>createDocumentFragment</span><span>(</span><span>)</span><span>;</span>\n    <span>let</span> child<span>;</span>\n    <span>while</span> <span>(</span><span>(</span>child <span>=</span> vm<span>.</span>$el<span>.</span>firstChild<span>)</span><span>)</span> <span>{</span>\n      fragment<span>.</span><span>appendChild</span><span>(</span>child<span>)</span><span>;</span>\n    <span>}</span>\n    <span>this</span><span>.</span><span>_replace</span><span>(</span>fragment<span>,</span> vm<span>)</span><span>;</span>\n    <span>// 再将文档碎片放入el中</span>\n    vm<span>.</span>$el<span>.</span><span>appendChild</span><span>(</span>fragment<span>)</span><span>;</span>\n  <span>}</span>\n  <span>_replace</span><span>(</span><span>fragment<span>,</span> vm</span><span>)</span> <span>{</span>\n    Array<span>.</span><span>from</span><span>(</span>fragment<span>.</span>childNodes<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>node</span><span>)</span> <span>=></span> <span>{</span>\n      <span>let</span> text <span>=</span> node<span>.</span>textContent<span>;</span>\n      <span>let</span> reg <span>=</span> <span><span>/</span><span>\\{\\{(.*?)\\}\\}</span><span>/</span><span>g</span></span><span>;</span> <span>// 匹配{{}}的内容</span>\n      <span>/*\n       * nodeType: 1 元素节点，3 文本节点\n       */</span>\n      <span>if</span> <span>(</span>node<span>.</span>nodeType <span>===</span> <span>3</span> <span>&amp;&amp;</span> reg<span>.</span><span>test</span><span>(</span>text<span>)</span><span>)</span> <span>{</span>\n        <span>function</span> <span>_replaceText</span><span>(</span><span>)</span> <span>{</span>\n          <span>// 替换节点文本</span>\n          node<span>.</span>textContent <span>=</span> text<span>.</span><span>replace</span><span>(</span>reg<span>,</span> <span>(</span><span>matched<span>,</span> placeholder</span><span>)</span> <span>=></span> <span>{</span>\n            console<span>.</span><span>log</span><span>(</span>matched<span>,</span> placeholder<span>)</span><span>;</span>\n            <span>new</span> <span>Watcher</span><span>(</span>vm<span>,</span> placeholder<span>,</span> _replaceText<span>)</span><span>;</span>\n            <span>return</span> placeholder<span>.</span><span>split</span><span>(</span><span>\".\"</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>val<span>,</span> key</span><span>)</span> <span>=></span> <span>{</span>\n              <span>return</span> val<span>[</span>key<span>]</span><span>;</span>\n            <span>}</span><span>,</span> vm<span>)</span><span>;</span>\n          <span>}</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>_replaceText</span><span>(</span><span>)</span><span>;</span>\n      <span>}</span>\n      <span>if</span> <span>(</span>node<span>.</span>nodeType <span>===</span> <span>1</span><span>)</span> <span>{</span>\n        <span>let</span> attrs <span>=</span> node<span>.</span>attributes<span>;</span> <span>// 获取dom节点的属性</span>\n        Array<span>.</span><span>from</span><span>(</span>attrs<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>attr</span><span>)</span> <span>=></span> <span>{</span>\n          console<span>.</span><span>log</span><span>(</span>attr<span>)</span><span>;</span>\n          <span>let</span> name <span>=</span> attr<span>.</span>name<span>;</span>\n          <span>let</span> exp <span>=</span> attr<span>.</span>value<span>;</span>\n          <span>if</span> <span>(</span>name<span>.</span><span>includes</span><span>(</span><span>\"v-model\"</span><span>)</span><span>)</span> <span>{</span>\n            <span>// v-model</span>\n            node<span>.</span>value <span>=</span> vm<span>[</span>exp<span>]</span><span>;</span>\n          <span>}</span> <span>else</span> <span>if</span> <span>(</span>name<span>.</span><span>includes</span><span>(</span><span>\"@click\"</span><span>)</span><span>)</span> <span>{</span>\n            <span>// 绑定点击事件</span>\n            node<span>.</span><span>addEventListener</span><span>(</span><span>\"click\"</span><span>,</span> vm<span>[</span>exp<span>]</span><span>)</span><span>;</span>\n          <span>}</span> <span>else</span> <span>if</span> <span>(</span>name<span>.</span><span>includes</span><span>(</span><span>\"v-show\"</span><span>)</span><span>)</span> <span>{</span>\n            <span>// v-show指令处理</span>\n            vm<span>.</span>vShow<span>.</span><span>push</span><span>(</span><span>{</span>\n              node<span>,</span>\n              type<span>:</span> <span>\"v-show\"</span><span>,</span>\n              key<span>:</span> exp<span>,</span>\n            <span>}</span><span>)</span><span>;</span>\n            node<span>.</span>style<span>.</span>display <span>=</span> vm<span>[</span>exp<span>]</span> <span>?</span> <span>\"\"</span> <span>:</span> <span>\"none\"</span><span>;</span>\n            console<span>.</span><span>log</span><span>(</span>vm<span>)</span><span>;</span>\n          <span>}</span>\n          <span>new</span> <span>Watcher</span><span>(</span>vm<span>,</span> exp<span>,</span> <span>function</span><span>(</span><span>newVal</span><span>)</span> <span>{</span>\n            node<span>.</span>value <span>=</span> newVal<span>;</span> <span>// 当watcher触发时会自动将内容放进输入框中</span>\n          <span>}</span><span>)</span><span>;</span>\n          node<span>.</span><span>addEventListener</span><span>(</span><span>\"input\"</span><span>,</span> <span>function</span><span>(</span><span>e</span><span>)</span> <span>{</span>\n            <span>// 监听input事件，输入时更新数据</span>\n            <span>let</span> newVal <span>=</span> e<span>.</span>target<span>.</span>value<span>;</span>\n            vm<span>[</span>exp<span>]</span> <span>=</span> newVal<span>;</span>\n          <span>}</span><span>)</span><span>;</span>\n        <span>}</span><span>)</span><span>;</span>\n      <span>}</span>\n      <span>if</span> <span>(</span>node<span>.</span>childNodes <span>&amp;&amp;</span> node<span>.</span>childNodes<span>.</span>length<span>)</span> <span>{</span>\n        <span>this</span><span>.</span><span>_replace</span><span>(</span>node<span>,</span> vm<span>)</span><span>;</span> <span>// 递归遍历节点</span>\n      <span>}</span>\n    <span>}</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br></div></div><h2 id=\"总结\"> 总结</h2>\n<p>目前还需要一段时间去消化这些知识，这篇就当作学习记录吧！不敢说是技术分享，讲的实在太烂了呜呜呜…</p>\n",
      "date_published": "2021-10-06T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.791Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "框架原理"
      ]
    },
    {
      "title": "切身体会http/2相对于http/1.1的提升",
      "url": "https://amschen.cn/articles/2021-10-23/%E5%88%87%E8%BA%AB%E4%BD%93%E4%BC%9Ahttp2.0%E8%BE%83http1.1%E7%9A%84%E6%8F%90%E5%8D%87/",
      "id": "https://amschen.cn/articles/2021-10-23/%E5%88%87%E8%BA%AB%E4%BD%93%E4%BC%9Ahttp2.0%E8%BE%83http1.1%E7%9A%84%E6%8F%90%E5%8D%87/",
      "content_html": "<h2 id=\"遇到的问题\"> 遇到的问题</h2>\n<p>之前一直在苦恼自己博客首次加载速度巨慢的问题，三十多秒才把博客文章列表加载出来，又不想动源码，所以就在nginx寻找可优化的点。</p>\n<h2 id=\"解决过程\"> 解决过程</h2>\n<p>一开始尝试了gzip，略有提升，但是效果不大，通过浏览器的devTool发现，个别文件要加载很久，也就是三十多秒，因为http/1.1是单线程串行请求，所以这些请求就阻塞了后面的请求，导致了后面请求一直在等待(?线头阻塞)。</p>\n<p><img src=\"./images/request.png\" alt=\"request\" /></p>\n<p>然后今早起床，看了一下http/11和http/2的区别，然后就发现了http/2的新特性--多路复用。</p>\n<div><p>http/2多路复用</p>\n<p>多个请求可以同时在一个连接上并行进行，请求不会出现阻塞的情况，也就是说，某个请求耗时严重，但是并不会影响到其它请求。</p>\n</div>\n<p>看到这个，完全符合我的需求，兴致勃勃地去nginx配置http2，只需修改一行即可，在 <code>listen 443 ssl</code> 后面添加 <code>http2 default_server</code>。</p>\n<div><pre><code>listen 443 ssl http2 default_server;\n</code></pre>\n<div><span>1</span><br></div></div><p>配置完成只会，重载配置 =============&gt; 从发起请求到博客文章列表显示约7s。</p>\n<p>相对于之前来说已经有很大的提升了，至于怎么继续提高加载速度只能从其它方面寻找方法了。</p>\n<h2 id=\"总结\"> 总结</h2>\n<p>最后对http/2的新特性做一个简单的总结，总的来说，http/2主要在低延迟方面进行优化。</p>\n<div><p>头部压缩</p>\n<p>http/2使用encoder来减小header的大小，另外双方各自缓存一份header fields表，避免header重复发送。</p>\n</div>\n<div><p>二进制分帧</p>\n<p>将所有的传输信息分割成更小的消息和帧并采用二进制编码。</p>\n</div>\n<div><p>多路复用</p>\n<p>同一个tcp连接上允许多个http请求同时进行，避免了http/1.1中出现的线头阻塞问题。</p>\n</div>\n<div><p>服务端推送</p>\n<p>这块还不是特别了解，只知道服务端可以主动向客户端推送资源，并且具有缓存机制，通过html文档的头部判断客户端将要使用的资源，然后由服务端主动推送，从而减少了客户端请求的这一步骤。</p>\n</div>\n",
      "date_modified": "2022-05-11T16:27:22.796Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "网络协议"
      ]
    },
    {
      "title": "判断数组的5种方法",
      "url": "https://amschen.cn/articles/2021-10-23/%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95/",
      "id": "https://amschen.cn/articles/2021-10-23/%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95/",
      "content_html": "<p>由于js中数组属于引用类型，而引用类型都归为object，所以数组是不能通过 <code>typeof</code> 来判断</p>\n<div><pre><code><span>typeof</span> Array <span>// output: object</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>因此需要通过其它手段来判断</p>\n<ul>\n<li>原型判断</li>\n<li>实例的父类判断</li>\n<li>ES5中的 <code>isArray</code> 方法</li>\n<li>构造函数判断</li>\n<li>使用Object.prototype判断</li>\n</ul>\n<div><pre><code><span>var</span> arr <span>=</span> <span>[</span><span>]</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>\n    arr<span>.</span>__proto__ <span>===</span> <span>Array</span><span>.</span>prototype<span>,</span> \n    arr <span>instanceof</span> <span>Array</span><span>,</span> \n    Array<span>.</span><span>isArray</span><span>(</span>arr<span>)</span><span>,</span> \n    arr<span>.</span>constructor <span>===</span> Array<span>,</span> \n    <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>arr<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>13</span><span>)</span> <span>===</span> <span>'Array'</span>\n<span>)</span><span>;</span>\n<span>// output: true true true true true</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>",
      "date_modified": "2022-05-11T16:27:22.799Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "Js"
      ]
    },
    {
      "title": "v-key的作用",
      "url": "https://amschen.cn/articles/2021-10-22/v-key%E7%9A%84%E4%BD%9C%E7%94%A8/",
      "id": "https://amschen.cn/articles/2021-10-22/v-key%E7%9A%84%E4%BD%9C%E7%94%A8/",
      "content_html": "<p>无论开发小程序还是Vue应用，都经常会使用到列表渲染，在使用过程中，如果不绑定 <code>key</code> 值，ide经常警告需要绑定 <code>key</code> 值。但是一直都没有去深究为什么需要绑定一个 <code>key</code> 值，现在终于有时间了，所以去关注一下这些底层的东西。</p>\n<h2 id=\"举个栗子\"> 举个栗子</h2>\n<div><pre><code><span><span><span>&lt;</span>head</span><span>></span></span>\n  <span><span><span>&lt;</span>title</span><span>></span></span>v-key<span><span><span>&lt;/</span>title</span><span>></span></span>\n<span><span><span>&lt;/</span>head</span><span>></span></span>\n<span><span><span>&lt;</span>body</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>div</span><span>></span></span>\n      <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>v-model</span><span><span>=</span><span>\"</span>username<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>addUser<span>\"</span></span><span>></span></span>添加用户<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>v-for</span><span><span>=</span><span>\"</span>user in users<span>\"</span></span><span>></span></span>  //:key=\"user.id\"\n      <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>checkbox<span>\"</span></span><span>></span></span>{{user.username}}\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://cdn.jsdelivr.net/npm/vue@2<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n  <span>var</span> app <span>=</span> <span>new</span> <span>Vue</span><span>(</span><span>{</span>\n    el<span>:</span> <span>'#app'</span><span>,</span>\n    data<span>:</span> <span>{</span>\n      curId<span>:</span> <span>3</span><span>,</span>\n      username<span>:</span> <span>''</span><span>,</span>\n      users<span>:</span> <span>[</span>\n        <span>{</span>\n          id<span>:</span> <span>1</span><span>,</span>\n          username<span>:</span> <span>'小红'</span>\n        <span>}</span><span>,</span>\n        <span>{</span>\n          id<span>:</span> <span>2</span><span>,</span>\n          username<span>:</span> <span>'小明'</span>\n        <span>}</span><span>,</span>\n        <span>{</span>\n          id<span>:</span> <span>3</span><span>,</span>\n          username<span>:</span> <span>'小天'</span>\n        <span>}</span>\n      <span>]</span>\n    <span>}</span><span>,</span>\n    methods<span>:</span> <span>{</span>\n      <span>addUser</span><span>(</span><span>)</span> <span>{</span>\n        <span>this</span><span>.</span>users<span>.</span><span>unshift</span><span>(</span><span>{</span>\n          id<span>:</span> <span>++</span><span>this</span><span>.</span>curId<span>,</span>\n          username<span>:</span> <span>this</span><span>.</span>username\n        <span>}</span><span>)</span><span>;</span>\n        <span>this</span><span>.</span>username <span>=</span> <span>''</span><span>;</span>\n      <span>}</span>\n    <span>}</span><span>,</span>\n  <span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div><p>不绑定 <code>key</code> 的情况，从数组头部添加元素时，checkbox选中的永远是第二条数据。</p>\n<p><img src=\"./images/v-key-1.png\" alt=\"\" />\n<img src=\"./images/v-key-2.png\" alt=\"\" /></p>\n<p>当将 <code>key</code> 绑定为user的id时，checkbox选中的元素即可不受新增元素影响。</p>\n<p><img src=\"./images/v-key-3.png\" alt=\"\" /></p>\n<h2 id=\"怎么如此-🤔\"> 怎么如此？🤔</h2>\n<p>这就要从Vue的diff算法说起了，算了，不扯这么远(菜狗</p>\n<p>先上图，下面是没有 <code>key</code> 和有 <code>key</code>的比较过程。</p>\n<p>这是<strong>未绑定</strong> <code>key</code> 时的比较过程：</p>\n<p><img src=\"./images/v-key-4.png\" alt=\"\" /></p>\n<p>这是<strong>绑定</strong> <code>key</code> 时的比较过程：</p>\n<p><img src=\"./images/v-key-5.png\" alt=\"\" /></p>\n<p>通过上面两幅图可以看出，当绑定 <code>key</code> 之后，节点更新时，节点的比较只会和 <code>key</code> 相同的节点进行对比，从而节省的DOM操作的开销，除了避免例子里面的情况，同时还会提高渲染效率。</p>\n<p>然后绑定key时建议是选择静态不变的唯一值，不要绑定数组的索引，我以前就是一知半解，一直绑定的是数组的索引...</p>\n<p>最后，算是把这个 <code>key</code> 值给搞明白了！</p>\n",
      "date_published": "2021-10-22T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.803Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "寄生组合式继承",
      "url": "https://amschen.cn/articles/2021-10-27/%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF/",
      "id": "https://amschen.cn/articles/2021-10-27/%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF/",
      "content_html": "<p>emmm...一直一来对继承方式都搞不懂，感觉绕来绕去的好乱，今天决定逐个突破😶。</p>\n<p>看了各种继承方式的比较，寄生组合式继承是比较理想的，因为相对来说操作较少且弥补了寄生继承和组合继承的缺点,既可以函数复用，也不用多次调用父类构造函数。</p>\n<p>寄生组合式继承顾名思义就是寄生式继承和组合式继承结合使用，下面以代码形式展示该继承的特点。</p>\n<div><pre><code><span>function</span> <span>Parent</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>function</span> <span>Child</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n<span>Parent</span><span>.</span>prototype<span>.</span>src <span>=</span> <span>'I am from parent.'</span><span>;</span>\n\n<span>Parent</span><span>.</span>prototype<span>.</span><span>commonFunc</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'This is common.'</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>inherit</span><span>(</span><span>Parent<span>,</span> Child</span><span>)</span> <span>{</span>\n    <span>var</span> prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>Parent</span><span>.</span>prototype<span>)</span><span>;</span>\n    prototype<span>.</span>constructor <span>=</span> Child<span>;</span>  <span>// 取代：Child.prototype.constrcutor=Child</span>\n    <span>Child</span><span>.</span>prototype <span>=</span> prototype<span>;</span>   <span>// 取代：Child.prototype=new Person();</span>\n<span>}</span>\n\n<span>inherit</span><span>(</span>Parent<span>,</span> Child<span>)</span><span>;</span>\n\n<span>var</span> child <span>=</span> <span>new</span> <span>Child</span><span>(</span><span>)</span><span>;</span>\nchild<span>.</span><span>commonFunc</span><span>(</span><span>)</span><span>;</span> <span>// output: This is common.</span>\nconsole<span>.</span><span>log</span><span>(</span>child<span>.</span>src<span>)</span><span>;</span> <span>// output: I am from parent.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div>",
      "date_modified": "2022-05-11T16:27:22.805Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "JS"
      ]
    },
    {
      "title": "Vue computed和watch的区别",
      "url": "https://amschen.cn/articles/2021-10-22/Vue%20computed%E5%92%8Cwatch%E7%9A%84%E5%8C%BA%E5%88%AB/",
      "id": "https://amschen.cn/articles/2021-10-22/Vue%20computed%E5%92%8Cwatch%E7%9A%84%E5%8C%BA%E5%88%AB/",
      "content_html": "<p><code>computed</code> 和 <code>watch</code> 的用法比较相似，由于其作用相近，经常搞不懂它俩的区别，所以这几天专门花了点事件去“研究”了一下。</p>\n<h2 id=\"computed-和-watch-的区别\"> computed 和 watch 的区别</h2>\n<h3 id=\"用法上的区别\"> 用法上的区别</h3>\n<h4 id=\"computed\"> computed</h4>\n<ul>\n<li>不允许异步操作。</li>\n<li>计算属性的函数必须 <code>return</code> ，否则属性不会更新。</li>\n<li>可以设置 <code>getter</code> 和 <code>setter</code> 。</li>\n<li>具有缓存机制，页面重新渲染时，当属性依赖的其它属性不发生变化时，不会触发计算函数，而是从上一次计算的结果缓存中获取数据，当依赖属性更新时，将会在下一次调用 <code>getter</code> 时重新计算，并将结果存到缓存中，减小了内存开销。</li>\n</ul>\n<p><img src=\"./images/presentation.gif\" alt=\"pre\" /></p>\n<h4 id=\"watch\"> watch</h4>\n<ul>\n<li>允许异步操作，比如http请求。</li>\n<li>每次页面重新渲染都会执行相应的函数。</li>\n</ul>\n<h3 id=\"demo\"> demo</h3>\n<p>话不多说，直接上 demo，这里价格计算为例。</p>\n<h4 id=\"html-部分\"> Html 部分</h4>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span><span>></span></span>\n  <span><span><span>&lt;</span>body</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>h3</span><span>></span></span>总价格:{{totalPrice}}<span><span><span>&lt;/</span>h3</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>span</span><span>></span></span>单价:<span><span><span>&lt;/</span>span</span><span>></span></span>\n        <span><span><span>&lt;</span>input</span> <span>v-model</span><span><span>=</span><span>\"</span>price<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>/></span></span>\n        <span><span><span>&lt;</span>span</span><span>></span></span>数量:<span><span><span>&lt;/</span>span</span><span>></span></span>\n        <span><span><span>&lt;</span>input</span> <span>v-model</span><span><span>=</span><span>\"</span>num<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>/></span></span>\n        <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>getTotalPrice<span>\"</span></span><span>></span></span>获取总价格<span><span><span>&lt;/</span>button</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h4 id=\"javascript\"> javascript</h4>\n<p>同样的行为可以对比一下使用 <code>watch</code> 和 <code>computed</code> 的区别</p>\n<div><pre><code>// watch\n<span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://cdn.jsdelivr.net/npm/vue@2<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>var</span> app <span>=</span> <span>new</span> <span>Vue</span><span>(</span><span>{</span>\n  el<span>:</span> <span>'#app'</span><span>,</span>\n  data<span>:</span> <span>{</span>\n    num<span>:</span> <span>0</span><span>,</span>\n    price<span>:</span> <span>12</span><span>,</span>\n    totalPrice<span>:</span> <span>0</span><span>,</span>\n  <span>}</span><span>,</span>\n  watch<span>:</span> <span>{</span>\n    <span>'num'</span><span>:</span> <span>function</span><span>(</span><span>newV<span>,</span> oldV</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>totalPrice <span>=</span> <span>this</span><span>.</span>price <span>*</span> newV<span>;</span>\n    <span>}</span><span>,</span>\n    <span>'price'</span><span>:</span> <span>function</span><span>(</span><span>newV<span>,</span> oldV</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>totalPrice <span>=</span> <span>this</span><span>.</span>num <span>*</span> newV<span>;</span>\n    <span>}</span>\n  <span>}</span>\n  methods<span>:</span> <span>{</span>\n    <span>getTotalPrice</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>num <span>=</span> <span>1</span><span>;</span>\n      <span>alert</span><span>(</span><span>this</span><span>.</span>totalPrice<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><div><pre><code>// computed\n<span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://cdn.jsdelivr.net/npm/vue@2<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>var</span> app <span>=</span> <span>new</span> <span>Vue</span><span>(</span><span>{</span>\n  el<span>:</span> <span>\"#app\"</span><span>,</span>\n  data<span>:</span> <span>{</span>\n    num<span>:</span> <span>0</span><span>,</span>\n    price<span>:</span> <span>12</span><span>,</span>\n  <span>}</span><span>,</span>\n  computed<span>:</span> <span>{</span>\n    totalPrice<span>:</span> <span>{</span>\n      <span>get</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>\"触发computed\"</span><span>)</span><span>;</span>\n        <span>return</span> <span>this</span><span>.</span>num <span>*</span> <span>this</span><span>.</span>price<span>;</span>\n      <span>}</span><span>,</span>\n    <span>}</span><span>,</span>\n  <span>}</span><span>,</span>\n  methods<span>:</span> <span>{</span>\n    <span>getTotalPrice</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>num <span>=</span> <span>1</span><span>;</span>\n      <span>alert</span><span>(</span><span>this</span><span>.</span>totalPrice<span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>从上面的代码来看，<code>computed</code> 显然比 <code>watch</code> 要简洁，而且维护性更好，使用 <code>computed</code> 只需要监听 <code>totalPrice</code> 这个属性即可，当该属性所依赖的其它属性发生变化时，则会在下一次调用 <code>getter</code> 时重新对该属性进行计算，而 <code>watch</code> 则需要监听其所依赖的属性。</p>\n<h3 id=\"适用场景\"> 适用场景</h3>\n<h4 id=\"computed-2\"> computed</h4>\n<p>适用于多对一关系的场景，即一个属性依赖于多个属性。比如购物车，当商品的数量/价格发生变化时都需要重新计算总价格，和上面的例子类似。</p>\n<h4 id=\"watch-2\"> watch</h4>\n<p>适用于一对多关系的场景，即当一个属性发生变化时，其它关联的属性也需要随之发生相应的变化。比如路由的变化，当监听到<code>route</code>发生变化时，页面的数据也需要发生相应的改变，那么使用 <code>watch</code> 更好一点。</p>\n<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>var</span> app <span>=</span> <span>new</span> <span>Vue</span><span>(</span><span>{</span>\n  el<span>:</span> <span>\"#app\"</span><span>,</span>\n  data<span>:</span> <span>{</span>\n    title<span>:</span> <span>\"\"</span><span>,</span>\n    tableData<span>:</span> <span>[</span><span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n  watch<span>:</span> <span>{</span>\n    <span>$router</span><span>:</span> <span>function</span><span>(</span><span>n<span>,</span> o</span><span>)</span> <span>{</span>\n      <span>if</span> <span>(</span>xxx<span>)</span> <span>{</span>\n        <span>// 更新title</span>\n        <span>// 更新tableDate</span>\n      <span>}</span>\n    <span>}</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>",
      "date_published": "2021-10-22T00:00:00.000Z",
      "date_modified": "2022-05-11T16:27:22.813Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "手写Promise.all和Promise.race",
      "url": "https://amschen.cn/articles/2021-11-03/%E6%89%8B%E5%86%99Promise.all%E5%92%8CPromise.race/",
      "id": "https://amschen.cn/articles/2021-11-03/%E6%89%8B%E5%86%99Promise.all%E5%92%8CPromise.race/",
      "content_html": "<h2 id=\"promise-all-和-promise-race-的运行机制\"> Promise.all 和 Promise.race 的运行机制</h2>\n<p>当我们想要实现其功能时，首先得先了解其运行机制，什么条件达到什么结果。</p>\n<div><p>Promise.all</p>\n<p>当所有的 promise 都成功执行时才返回 resolve，只要任意一个失败都返回 reject，且后面的 promise 停止执行。\nresolve 返回的是一个结果数组，而 reject 则是直接返回。</p>\n</div>\n<div><p>Promise.race</p>\n<p><code>race</code>与<code>all</code>相比，更像是比谁执行更快，其返回结果只与第一个成功执行的状态有关，但是无论是 reslove 还是 reject 都不会取消后面的 promise 执行。\nresolve 和 reject 都是直接返回。</p>\n</div>\n<p>了解了它们内部的运行机制后就可以逐步实现其原理了。</p>\n<h2 id=\"实现\"> 实现</h2>\n<h3 id=\"promise-all\"> Promise.all</h3>\n<div><pre><code>Promise<span>.</span><span>_all</span> <span>=</span> <span>function</span><span>(</span><span>promise</span><span>)</span> <span>{</span>\n  <span>let</span> result <span>=</span> <span>[</span><span>]</span><span>;</span>\n  <span>let</span> succCount <span>=</span> <span>0</span><span>;</span>\n  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>\n    promise<span>.</span><span>forEach</span><span>(</span><span>(</span><span>p</span><span>)</span> <span>=></span> <span>{</span>\n      <span>// 先resolve(p)是因为防止传进来的参数不是promise，从而报错（`then undefined`）</span>\n      Promise<span>.</span><span>resolve</span><span>(</span>p<span>)</span><span>.</span><span>then</span><span>(</span>\n        <span>(</span><span>res</span><span>)</span> <span>=></span> <span>{</span>\n          succCount<span>++</span><span>;</span>\n          result<span>.</span><span>push</span><span>(</span>res<span>)</span><span>;</span>\n          <span>if</span> <span>(</span>succCount <span>===</span> promise<span>.</span>length<span>)</span> <span>{</span>\n            <span>// 当全部成功是resolve</span>\n            <span>resolve</span><span>(</span>result<span>)</span><span>;</span>\n          <span>}</span>\n        <span>}</span><span>,</span>\n        <span>(</span><span>err</span><span>)</span> <span>=></span> <span>reject</span><span>(</span>err<span>)</span> <span>// 有一个报错则直接reject</span>\n      <span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id=\"promise-race\"> Promise.race</h3>\n<div><pre><code>Promise<span>.</span><span>_race</span> <span>=</span> <span>function</span><span>(</span><span>promises</span><span>)</span> <span>{</span>\n  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>\n    promises<span>.</span><span>forEach</span><span>(</span><span>(</span><span>p</span><span>)</span> <span>=></span> <span>{</span>\n      Promise<span>.</span><span>resolve</span><span>(</span>p<span>)</span><span>.</span><span>then</span><span>(</span>\n        <span>// 无论成功与否都直接返回</span>\n        <span>(</span><span>res</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span>res<span>)</span><span>;</span><span>,</span>\n        <span>(</span><span>err</span><span>)</span> <span>=></span> <span>reject</span><span>(</span>err<span>)</span><span>;</span>\n      <span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"测试\"> 测试</h3>\n<div><pre><code><span>let</span> p1 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>\n  <span>resolve</span><span>(</span><span>\"成功了\"</span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>let</span> p2 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>\n  <span>resolve</span><span>(</span><span>\"success\"</span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>let</span> p3 <span>=</span> Promise<span>.</span><span>reject</span><span>(</span><span>\"失败\"</span><span>)</span><span>;</span>\n\nPromise<span>.</span><span>_all</span><span>(</span><span>[</span>p1<span>,</span> p2<span>]</span><span>)</span>\n  <span>.</span><span>then</span><span>(</span><span>(</span><span>res</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>res<span>)</span><span>)</span>  <span>// output: ['成功了', 'success']</span>\n  <span>.</span><span>catch</span><span>(</span><span>(</span><span>err</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>)</span><span>;</span>\n\nPromise<span>.</span><span>_all</span><span>(</span><span>[</span>p1<span>,</span> p2<span>,</span> p3<span>]</span><span>)</span>\n  <span>.</span><span>then</span><span>(</span><span>(</span><span>res</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>res<span>)</span><span>)</span>\n  <span>.</span><span>catch</span><span>(</span><span>(</span><span>err</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>)</span><span>;</span>  <span>// output: '失败'</span>\n\nPromise<span>.</span><span>_race</span><span>(</span><span>[</span>p1<span>,</span> p2<span>,</span> p3<span>]</span><span>)</span>\n  <span>.</span><span>then</span><span>(</span><span>(</span><span>res</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>res<span>)</span><span>)</span><span>;</span>  <span>// output: '成功了'</span>\n  <span>.</span><span>catch</span><span>(</span><span>(</span><span>err</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id=\"应用场景\"> 应用场景</h2>\n<div><p>Promise.all</p>\n<p>最常见的场景就是 api 的串行请求，当后一个请求依赖于前一个请求的返回结果时，此时使用 Promise.all 比较适合。</p>\n</div>\n<div><p>Promise.race</p>\n<p>将异步操作与定时器结合，限制异步操作的执行时间(不是终止操作)，当异步操作执行时间超过定时器设置的时间后，那么定时器触发，reject 一个超时错误。</p>\n</div>\n",
      "date_modified": "2022-05-11T16:27:22.817Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "JS"
      ]
    },
    {
      "title": "字节一面(60min 中途网络断了几分钟)",
      "url": "https://amschen.cn/articles/2021-11-17/%E9%9D%A2%E8%AF%95/",
      "id": "https://amschen.cn/articles/2021-11-17/%E9%9D%A2%E8%AF%95/",
      "content_html": "<h2 id=\"字节一面-60min-中途网络断了几分钟\"> 字节一面(60min 中途网络断了几分钟)</h2>\n<ol>\n<li>positon 的属性及作用，相对谁定位？(默认值答了 inherit，在面试官提示后还是坚持 inherit，真正的默认值是 static，凉)\n<ul>\n<li>position 是否会继承(答了不会，凉，如果设置了 inherit(规定应该从父元素继承 position 属性的值。)，那么就会产生继承)</li>\n</ul>\n</li>\n<li>说一下值引用、对象引用、包装引用\n<ul>\n<li>后面聊了 typeof 判断、数组判断方式(为什么可以判断)、typeof 的作用、instanceof 的作用</li>\n</ul>\n</li>\n<li>http 有几种请求方法</li>\n<li>option 请求的作用，是所有跨域都会出现 options 请求吗？为什么？(中途学校网络断了，绝)</li>\n<li>post 和 get 的区别</li>\n<li>post 的具体加密方式（纯属自己踩坑，上一个问题说了 post 会加密，真的有加密吗？）</li>\n<li>vue key 的作用</li>\n<li>vue computed 和 watch 的区别</li>\n<li>代码看输出 事件循环相关 promise 和 setTimeout 之类的</li>\n<li>数组扁平化</li>\n</ol>\n<div><pre><code><span>flatten</span><span>(</span><span>(</span><span>arr</span><span>)</span> <span>=></span> <span>[</span><span>1</span><span>,</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>,</span> <span>[</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>]</span><span>]</span><span>)</span><span>;</span> <span>// [1, 1, 2, 1, 2, 3]</span>\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"11\">\n<li>add()函数，传入任意数字量(可能 1 个或多个)，返回一个函数 add_x，add_x(任意数字量)返回和上一次传入的数字量总和。</li>\n</ol>\n<div><pre><code><span>let</span> add_5 <span>=</span> <span>add</span><span>(</span><span>5</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span><span>add_5</span><span>(</span><span>4</span><span>)</span><span>)</span><span>;</span> <span>//9</span>\n<span>let</span> add_1_and_add_2 <span>=</span> <span>add</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span><span>add_1_and_add_2</span><span>(</span><span>[</span><span>3</span><span>,</span> <span>4</span><span>]</span><span>)</span><span>)</span><span>;</span> <span>//10</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ol start=\"12\">\n<li>反问</li>\n</ol>\n",
      "date_modified": "2022-05-11T16:27:22.819Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": []
    },
    {
      "title": "react配置setupProxy之后页面无法打开",
      "url": "https://amschen.cn/articles/2022-01-25/11.23%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/",
      "id": "https://amschen.cn/articles/2022-01-25/11.23%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/",
      "content_html": "<h2 id=\"react配置setupproxy之后页面无法打开\"> react配置setupProxy之后页面无法打开</h2>\n<p>我<code>setupProxy.js</code>的配置如下</p>\n<div><pre><code><span>const</span> <span>{</span> proxy <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'http-proxy-middleware'</span><span>)</span>\n\nmodule<span>.</span><span>exports</span> <span>=</span> <span>function</span> <span>(</span><span>app</span><span>)</span> <span>{</span>\n  app<span>.</span><span>use</span><span>(</span>\n    <span>proxy</span><span>(</span><span>'/api/v1'</span><span>,</span> <span>{</span>\n      target<span>:</span> <span>'http://127.0.0.1:5000/'</span><span>,</span>\n      changeOrigin<span>:</span> <span>true</span>\n    <span>}</span><span>)</span>\n  <span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>然后重新编译项目，页面打不开了，显示拒绝连接，去除这个配置后又恢复正常，所以断定是这个配置有问题</p>\n<p>百度之后，发现上面的<code>proxy</code>语法是旧的，<code>http-proxy-middleware</code>大于<code>1.x</code>版本应该使用以下函数: <code>createProxyMiddleware</code></p>\n<div><pre><code><span>const</span> <span>{</span> createProxyMiddleware <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'http-proxy-middleware'</span><span>)</span>\n\nmodule<span>.</span><span>exports</span> <span>=</span> <span>function</span> <span>(</span><span>app</span><span>)</span> <span>{</span>\n  app<span>.</span><span>use</span><span>(</span>\n    <span>createProxyMiddleware</span><span>(</span><span>'/api/v1'</span><span>,</span> <span>{</span>\n      target<span>:</span> <span>'http://127.0.0.1:5000/'</span><span>,</span>\n      changeOrigin<span>:</span> <span>true</span>\n    <span>}</span><span>)</span>\n  <span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>心累。。。</p>\n",
      "date_modified": "2022-05-11T16:27:22.820Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "react"
      ]
    },
    {
      "title": "近期学习杂记",
      "url": "https://amschen.cn/articles/2021-11-12/%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/",
      "id": "https://amschen.cn/articles/2021-11-12/%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/",
      "content_html": "<h2 id=\"一些乱起八糟的东西\"> 一些乱起八糟的东西</h2>\n<p>最近学习有点疲惫了，就随便学学吧，记下来主要是为了不白看，记忆深刻一点。</p>\n<h3 id=\"options-请求\"> OPTIONS 请求</h3>\n<h4 id=\"用途\"> 用途</h4>\n<ul>\n<li>获取服务器支持的 HTTP 请求方法</li>\n<li>检查服务器的性能</li>\n</ul>\n<h4 id=\"为什么需要它\"> 为什么需要它？</h4>\n<p>这个请求方法一般和跨域挂钩，使用 OPTIONS 旨在发送正式请求前先探测目标地址具有什么约束，类似 TCP 的探测报文，这一行为也可以称为“预检”。</p>\n<h3 id=\"手写-call、apply、bind\"> 手写 call、apply、bind</h3>\n<h4 id=\"call\"> call</h4>\n<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>_call</span> <span>=</span> <span>function</span><span>(</span><span>thisArg<span>,</span> args</span><span>)</span> <span>{</span>\n    thisArg <span>=</span> thisArg <span>||</span> window<span>;</span>\n    <span>let</span> _fn <span>=</span> <span>Symbol</span><span>(</span><span>'_fn'</span><span>)</span><span>;</span> <span>//创建唯一键值，防止键名冲突</span>\n    thisArg<span>[</span>_fn<span>]</span> <span>=</span> <span>this</span><span>;</span> <span>//将函数挂载到thisArg上，可以通过this访问上面的值</span>\n    <span>let</span> res <span>=</span> thisArg<span>[</span>_fn<span>]</span><span>(</span><span>...</span>args<span>)</span><span>;</span>\n    <span>delete</span> thisArg<span>[</span>_fn<span>]</span><span>;</span> <span>//删除对象方法，恢复原对象内容</span>\n    <span>return</span> res<span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id=\"apply\"> apply</h4>\n<p>原理一样，参数传递不同</p>\n<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>_apply</span> <span>=</span> <span>function</span><span>(</span><span>thisArg<span>,</span> <span>...</span>args</span><span>)</span> <span>{</span>\n    thisArg <span>=</span> thisArg <span>||</span> window<span>;</span>\n    <span>let</span> _fn <span>=</span> <span>Symbol</span><span>(</span><span>'_fn'</span><span>)</span><span>;</span> <span>//创建唯一键值，防止键名冲突</span>\n    thisArg<span>[</span>_fn<span>]</span> <span>=</span> <span>this</span><span>;</span> <span>//将函数挂载到thisArg上，可以通过this访问上面的值</span>\n    <span>let</span> res <span>=</span> thisArg<span>[</span>_fn<span>]</span><span>(</span><span>...</span>args<span>)</span><span>;</span>\n    <span>delete</span> thisArg<span>[</span>_fn<span>]</span><span>;</span> <span>//删除对象方法，恢复原对象内容</span>\n    <span>return</span> res<span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id=\"bind\"> bind</h4>\n<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>_bind</span> <span>=</span> <span>function</span><span>(</span><span>thisArg<span>,</span> <span>...</span>args</span><span>)</span> <span>{</span>\n    <span>let</span> _fn <span>=</span> <span>Symbol</span><span>(</span><span>'_fn'</span><span>)</span><span>;</span>\n    thisArg<span>[</span>_fn<span>]</span> <span>=</span> <span>this</span><span>;</span>\n\n    <span>return</span> <span>function</span><span>(</span><span><span>...</span>rest</span><span>)</span> <span>{</span>\n        thisArg <span>=</span> thisArg <span>||</span> window<span>;</span>\n        <span>let</span> res <span>=</span> thisArg<span>[</span>_fn<span>]</span><span>(</span><span>...</span>args<span>.</span><span>concat</span><span>(</span>rest<span>)</span><span>)</span><span>;</span> <span>//原bind方法会拼接之前传递的参数</span>\n        <span>delete</span> thisArg<span>[</span>_fn<span>]</span><span>;</span> <span>//删除对象方法，恢复原对象内容</span>\n        <span>return</span> res<span>;</span>\n    <span>}</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"水平垂直居中的方法\"> 水平垂直居中的方法</h3>\n<div><pre><code><span>/* 方法1 利用定位居中 */</span>\n<span>position</span><span>:</span> relative<span>;</span>\n<span>top</span><span>:</span> 50%<span>;</span>\n<span>left</span><span>:</span> 50%\n<span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>)</span><span>;</span>\n\n<span>/* 方法2 父盒子使用display布局 */</span>\n<span>display</span><span>:</span> flex<span>;</span>\n<span>justify-content</span><span>:</span> center<span>;</span>\n<span>align-items</span><span>:</span> center<span>;</span>\n\n<span>/* 方法3 脱离文档流式居中 */</span>\n<span>position</span><span>:</span> absolute<span>;</span>\n<span>top</span><span>:</span> 0<span>;</span>\n<span>left</span><span>:</span> 0<span>;</span>\n<span>right</span><span>:</span> 0<span>;</span>\n<span>bottom</span><span>:</span> 0<span>;</span>\n<span>margin</span><span>:</span> auto<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"浮动布局实现三栏自适应\"> 浮动布局实现三栏自适应</h3>\n<p>如果要实现左右定宽、中间自适应只需要把注释样式生效即可。</p>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span><span>></span></span>\n    <span><span><span>&lt;</span>head</span><span>></span></span>\n        <span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n            <span>.container</span> <span>{</span>\n                <span>position</span><span>:</span> relative<span>;</span>\n                <span>left</span><span>:</span> 50%<span>;</span>\n                <span>width</span><span>:</span> 90vw<span>;</span>\n                <span>height</span><span>:</span> 50vw<span>;</span>\n                <span>margin-top</span><span>:</span> 50%<span>;</span>\n                <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>\n            <span>}</span>\n\n            <span>.left</span> <span>{</span>\n                <span>float</span><span>:</span> left<span>;</span>\n                <span>/* min-width: 200px; */</span>\n                <span>min-height</span><span>:</span> 100%<span>;</span>\n                <span>background-color</span><span>:</span> #ccc<span>;</span>\n            <span>}</span>\n\n            <span>.center</span> <span>{</span>\n                <span>/* margin: 0 200px; */</span>\n                <span>min-height</span><span>:</span> 100%<span>;</span>\n                <span>background-color</span><span>:</span> bisque<span>;</span>\n            <span>}</span>\n\n            <span>.right</span> <span>{</span>\n                <span>float</span><span>:</span> right<span>;</span>\n                <span>/* min-width: 250px; */</span>\n                <span>min-height</span><span>:</span> 100%<span>;</span>\n                <span>background-color</span><span>:</span> #ccfac2<span>;</span>\n            <span>}</span>\n        </span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n    <span><span><span>&lt;/</span>head</span><span>></span></span>\n    <span><span><span>&lt;</span>body</span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>container<span>\"</span></span><span>></span></span>\n            <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>left<span>\"</span></span><span>></span></span>left<span><span><span>&lt;/</span>div</span><span>></span></span>\n            <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>right<span>\"</span></span><span>></span></span>right<span><span><span>&lt;/</span>div</span><span>></span></span>\n            <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>center<span>\"</span></span><span>></span></span>center<span><span><span>&lt;/</span>div</span><span>></span></span>\n        <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><h4 id=\"效果\"> 效果</h4>\n<h5 id=\"三栏自适应\"> 三栏自适应</h5>\n<p><img src=\"./images/三栏自适应.png\" alt=\"三栏自适应\" /></p>\n<h5 id=\"两栏定宽中间自适应\"> 两栏定宽中间自适应</h5>\n<p><img src=\"./images/两栏定宽中间自适应.png\" alt=\"两栏定宽中间自适应\" /></p>\n<h3 id=\"js-宽松模式和严格模式区别\"> js 宽松模式和严格模式区别</h3>\n<p>这里只记录一下我能理解的</p>\n<ul>\n<li>严格模式下，<code>call</code>、<code>apply</code>传入<code>null</code>或<code>undefined</code>不会转换为 <code>window</code>，而是保持原样。</li>\n<li>严格模式下，变量需要在使用前声明，直接给变量赋值，不会隐式创建全局变量。</li>\n<li>严格模式下，不允许直接使用八进制字面量。</li>\n<li>严格模式下，函数形参同名会报错。</li>\n<li>严格模式下，对象中定义同名属性会抛出语法错误。</li>\n<li>严格模式下, <code>delete</code> 运算符后跟随非法标识符(即 <code>delete</code> 不存在的标识符)会抛出语法错误； 非严格模式下，会静默失败并返回 <code>false</code></li>\n</ul>\n<h3 id=\"vue3-0-新增内容\"> vue3.0 新增内容</h3>\n<ul>\n<li>响应式将<code>defineProperties</code>更换为<code>Proxy</code>，提升了性能，但是降低了兼容性，当然，vue 还是提供了旧观察模式的编译方式。</li>\n<li>组件逻辑都写进函数，<code>setup()</code>(Composition API)取代<code>data()</code>，该函数返回一个对象暴露给模板使用，并且只在初始化时调用一次。</li>\n<li>生命周期变更。<code>beforeCreate</code>和<code>created</code>被<code>setup</code>替代，<code>beforeDestory</code>和<code>destoryed</code>更名为<code>onBeforeUnMount</code>和<code>onUnmouted</code>，新增<code>onRenderTriggered</code>和<code>onRenderTracked</code>，其它生命周期名称前都加了一个<code>on</code>。另外，钩子是需要从 <code>vue</code> 中导入。</li>\n</ul>\n<p>。。。。。。。</p>\n<p>暂时先写这些，毕竟也没有正经学 vue3，以后有机会再补充吧！</p>\n<h3 id=\"图片懒加载实现\"> 图片懒加载实现</h3>\n<p>传统的实现是通过监听滚动条滚动来实现，然而这种方法计算太频繁了，性能不好，故采用<code>IntersectionObserver</code>这个对象来监听元素是否出现在视窗内，因为它的性能比监听滚动条要好。</p>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span><span>></span></span>\n    <span><span><span>&lt;</span>head</span><span>></span></span>\n        <span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n            <span>.container</span> <span>{</span>\n                <span>position</span><span>:</span> relative<span>;</span>\n                <span>left</span><span>:</span> 50%<span>;</span>\n                <span>display</span><span>:</span> flex<span>;</span>\n                <span>flex-direction</span><span>:</span> column<span>;</span>\n                <span>justify-content</span><span>:</span> center<span>;</span>\n                <span>align-items</span><span>:</span> center<span>;</span>\n                <span>width</span><span>:</span> 100vw<span>;</span>\n                <span>height</span><span>:</span> 100vh<span>;</span>\n                <span>margin-top</span><span>:</span> 50%<span>;</span>\n                <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>\n                <span>border</span><span>:</span> 1px solid #ccc<span>;</span>\n            <span>}</span>\n\n            <span>.img</span> <span>{</span>\n                <span>width</span><span>:</span> 500px<span>;</span>\n                <span>height</span><span>:</span> 500px<span>;</span>\n            <span>}</span>\n        </span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n    <span><span><span>&lt;/</span>head</span><span>></span></span>\n\n    <span><span><span>&lt;</span>body</span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>container<span>\"</span></span><span>></span></span>\n            <span><span><span>&lt;</span>img</span>\n                <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span>\n                <span>src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n                <span>alt</span><span><span>=</span><span>\"</span><span>\"</span></span>\n                <span>data-src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n            <span>/></span></span>\n            <span><span><span>&lt;</span>img</span>\n                <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span>\n                <span>src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n                <span>alt</span><span><span>=</span><span>\"</span><span>\"</span></span>\n                <span>data-src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n            <span>/></span></span>\n            <span><span><span>&lt;</span>img</span>\n                <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span>\n                <span>src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n                <span>alt</span><span><span>=</span><span>\"</span><span>\"</span></span>\n                <span>data-src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n            <span>/></span></span>\n            <span><span><span>&lt;</span>img</span>\n                <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span>\n                <span>src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n                <span>alt</span><span><span>=</span><span>\"</span><span>\"</span></span>\n                <span>data-src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n            <span>/></span></span>\n            <span><span><span>&lt;</span>img</span>\n                <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span>\n                <span>src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n                <span>alt</span><span><span>=</span><span>\"</span><span>\"</span></span>\n                <span>data-src</span><span><span>=</span><span>\"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.M9CUntHQGPvSO5JkAn5Y4AHaFA&amp;w=136&amp;h=100&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span>\"</span></span>\n            <span>/></span></span>\n        <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>body</span><span>></span></span>\n\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n        <span>let</span> imgs <span>=</span> Array<span>.</span><span>from</span><span>(</span>document<span>.</span><span>getElementsByClassName</span><span>(</span><span>'img'</span><span>)</span><span>)</span><span>;</span>\n        <span>let</span> io <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>lazyLoad<span>)</span><span>;</span>\n        imgs<span>.</span><span>forEach</span><span>(</span><span>(</span><span>img</span><span>)</span> <span>=></span> <span>{</span>\n            io<span>.</span><span>observe</span><span>(</span>img<span>)</span><span>;</span> <span>//监听img</span>\n        <span>}</span><span>)</span><span>;</span>\n        <span>function</span> <span>lazyLoad</span><span>(</span><span>entry</span><span>)</span> <span>{</span>\n            entry<span>.</span><span>forEach</span><span>(</span><span>(</span><span>el</span><span>)</span> <span>=></span> <span>{</span>\n                <span>//遍历每个img的状态</span>\n                console<span>.</span><span>log</span><span>(</span>el<span>.</span>isIntersecting<span>)</span><span>;</span>\n                <span>if</span> <span>(</span>el<span>.</span>isIntersecting<span>)</span> <span>{</span>\n                    el<span>.</span>target<span>.</span>src <span>=</span> el<span>.</span>target<span>.</span><span>getAttribute</span><span>(</span><span>'data-src'</span><span>)</span><span>;</span>\n                <span>}</span> <span>else</span> <span>{</span>\n                    el<span>.</span>target<span>.</span>src <span>=</span> <span>''</span><span>;</span>\n                <span>}</span>\n            <span>}</span><span>)</span><span>;</span>\n        <span>}</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br></div></div>",
      "date_modified": "2022-05-11T16:27:22.828Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "杂记"
      ]
    },
    {
      "title": "前端面试常见题汇总(持续更新中...)",
      "url": "https://amschen.cn/articles/2022-05-09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%A2%98%E6%B1%87%E6%80%BB(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD...)/",
      "id": "https://amschen.cn/articles/2022-05-09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%A2%98%E6%B1%87%E6%80%BB(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD...)/",
      "content_html": "<h2 id=\"汇总\"> 汇总</h2>\n<h3 id=\"网络\"> 网络</h3>\n<ol>\n<li>\n<p>UDP特点：无连接、传输速度快、不保证传输可靠性，适用于音视频场景。</p>\n</li>\n<li>\n<p>怎么保证UDP的接收顺序：在包头加上序号。</p>\n</li>\n<li>\n<p>TCP为什么要四次挥手：确保双方都已经准备好断开连接，比如服务端发出断开请求，然后客户端返回了ACK，但是这个ACK仅仅表示客户端收到了断开请求，而不是同意了断开，因为客户端可能还有数据在发送，所以还要客户端准备好了再向服务端发送断开请求，这时候已经3次挥手了，还需要服务端返回确认帧来告诉客户端它收到了断开请求。然后才能保证双方都做好了断开连接的准备。</p>\n</li>\n<li>\n<p>HTTP状态码：</p>\n<ul>\n<li>\n<p>分类：</p>\n<ul>\n<li>1xx：表示消息；</li>\n<li>2xx：表示成功；</li>\n<li>3xx：表示重定向；</li>\n<li>4xx：表示请求错误；</li>\n<li>5xx：表示服务器错误。</li>\n</ul>\n</li>\n<li>\n<p>1xx：</p>\n<p>表示请求被接收，需要继续处理，临时响应。</p>\n<ul>\n<li>100：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</li>\n<li>101：服务器根据客户端的请求切换协议，主要用于websocket或http2升级。</li>\n</ul>\n</li>\n<li>\n<p>2xx：</p>\n<p>表示请求已成功被服务器接收、理解并接受。</p>\n<ul>\n<li>200(成功)：请求已成功，请求所希望的响应头或数据体将随之返回。</li>\n<li>201(已创建)：请求成功并且服务器创建了新的资源。</li>\n<li>202(已创建)：服务器已经接收请求，但尚未处理。</li>\n<li>203(非授权消息)：服务器已成功处理请求，但返回的信息可能来自另一来源。</li>\n<li>204(无内容)：服务器成功处理请求，但没有返回任何内容。</li>\n<li>205(重置内容)：服务器成功处理请求，但没有返回任何内容。</li>\n<li>206(部分内容)：服务器成功处理了部分请求。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安全\"> 安全</h3>\n<ol>\n<li>\n<p>xss(跨站脚本攻击)：允许攻击者将恶意代码植入到提供给其它用户使用的页面中。这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。</p>\n<p><strong>分类：</strong></p>\n<ul>\n<li>\n<p>存储型：</p>\n<p>(1) 攻击者将恶意代码提交到目标网站的数据库中；</p>\n<p>(2) 用户打开目标网站时，网站服务端将恶意代码从数据库取出，返回至浏览器；</p>\n<p>(3) 浏览器接收到响应后解析执行，混在其中的恶意代码也被执行；</p>\n<p>(4) 恶意代码窃取用户数据并发送到攻击者的服务器，或冒充用户行为，调用目标网站接口执行攻击者指定的操作。</p>\n</li>\n<li>\n<p>反射型：常见于通过 URL 传递参数的功能，如网站搜索、跳转等。</p>\n<p>(1) 攻击者构造出特殊的URL，包含恶意代码；</p>\n<p>(2) 用户打开带有恶意代码的URL时，网站服务端将恶意代码从URL取出，拼接在HTML中返回给浏览器；</p>\n<p>(3) 用户浏览器接收到响应后解析执行，其中的恶意代码也被执行；</p>\n<p>(4) 恶意代码窃取用户数据并发送到攻击者的服务器，或冒充用户行为，调用目标网站接口执行攻击者指定的操作。</p>\n</li>\n</ul>\n<p><em>==反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。==</em></p>\n<ul>\n<li>\n<p>DOM型：</p>\n<p>(1) 攻击者构造出特殊的URL，包含恶意代码；</p>\n<p>(2) 用户浏览器接收到响应后解析执行，其中的恶意代码也被执行；</p>\n<p>(3) 恶意代码窃取用户数据并发送到攻击者的服务器，或冒充用户行为，调用目标网站接口执行攻击者指定的操作。</p>\n</li>\n</ul>\n<p><strong>预防：</strong></p>\n<ul>\n<li>攻击者提交恶意代码：\n<ul>\n<li>用户输入过程中，前端过滤用户输入的恶意代码。但是如果攻击者绕开前端请求，直接构造请求就不能预防了。</li>\n<li>在后端写入数据库前，对输入进行过滤，然后把内容给前端，但是这个内容在不同地方就会有不同显示。</li>\n</ul>\n</li>\n<li>浏览器执行恶意代码：\n<ul>\n<li>在使用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 <code>.textContent</code>、<code>.setAttribute()</code> 等。</li>\n<li>如果用 <code>Vue/React</code> 技术栈，并且不使用 <code>v-html</code>/<code>dangerouslySetInnerHTML</code> 功能，就在前端 <code>render</code> 阶段避免 <code>innerHTML</code>、<code>outerHTML</code> 的 XSS 隐患。</li>\n<li>DOM 中的内联事件监听器，如 <code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code> 等，<code>&lt;a&gt;</code> 标签的 <code>href</code> 属性，JavaScript 的 <code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code> 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>csrf(跨站请求伪造)：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。</p>\n<p><strong>典型的CSRF攻击：</strong></p>\n<p>​\t(1) 受害者登录a.com，并保留了登录凭证（Cookie）；</p>\n<p>​\t(2) 攻击者引诱受害者访问了b.com；</p>\n<p>​\t(3) b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie；</p>\n<p>​\t(4) a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发\t送的请求；</p>\n<p>​\t(5) a.com以受害者的名义执行了act=xx；</p>\n<p>​\t(6) 攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操\t作。</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。</li>\n<li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。</li>\n<li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。</li>\n<li>跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。</li>\n</ul>\n<p><strong>预防：</strong></p>\n<ul>\n<li>阻止不明外域的访问\n<ul>\n<li>同源检测</li>\n<li>Samesite Cookie</li>\n</ul>\n</li>\n<li>提交时要求附加本域才能获取的信息\n<ul>\n<li>CSRF Token</li>\n<li>双重Cookie验证</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>sql注入：将恶意的 <code>Sql</code>查询或添加语句插入到应用的输入参数中，再在后台 <code>Sql</code>服务器上解析执行进行的攻击。</p>\n<p><strong>注入流程：</strong></p>\n<ul>\n<li>找出SQL漏洞的注入点；</li>\n<li>判断数据库的类型以及版本；</li>\n<li>猜解用户名和密码；</li>\n<li>利用工具查找Web后台管理入口；</li>\n<li>入侵和破坏。</li>\n</ul>\n<p><strong>预防：</strong></p>\n<ul>\n<li>严格检查输入变量的类型和格式；</li>\n<li>过滤和转义特殊字符；</li>\n<li>对访问数据库的Web应用程序采用Web应用防火墙。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"工程化\"> 工程化</h3>\n<ol>\n<li>\n<p>webpack：</p>\n<ul>\n<li>打包过程：识别入口文件、针对import关键字识别模块依赖、分析代码、转换代码、编译代码、输出代码。</li>\n<li>loader：文件加载器，比如css-loader，ts-loader等可以对文件进行相应的转译（如编译、压缩）。</li>\n<li>plugin：作为扩展使用，增强webpack的能力，webpack运行的生命周期会广播出许多时间，plugin通过监听这些事件，在适当的时机通过webpack提供的api改变输出结果。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"浏览器\"> 浏览器</h3>\n<ol>\n<li>\n<p>重绘：由于<code>节点几何属性</code>或<code>样式</code>发生改变而<code>不会影响布局</code>。如<code>outline</code>、<code>visibility</code>、<code>color</code>、<code>background-color</code>。</p>\n</li>\n<li>\n<p>回流：布局发生改变。（影响浏览器性能的因素，因为其变化涉及到部分页面或整个页面的布局更新）。</p>\n</li>\n<li>\n<p>何时发生回流：</p>\n<ul>\n<li>添加或删除可见DOM元素；</li>\n<li>元素位置发生改变；</li>\n<li>元素尺寸发生改变；</li>\n<li>内容发生改变；</li>\n<li>页面开始渲染；</li>\n<li>浏览器窗口尺寸发生改变。</li>\n</ul>\n<p><em>备注：回流一定发生重绘，重绘不一定发生回流。</em></p>\n</li>\n<li>\n<p>浏览器渲染过程：</p>\n<p>(1) 解析HTML，生成DOM树；同时解析样式表，生成CSS树；</p>\n<p>(2) 合并DOM树和CSSOM树，生成渲染树；</p>\n<p>(3) Layout(回流)：根据生成的渲染树，进行回流，得到节点的几何信息（位置、大小）；</p>\n<p>(4) Painting(重绘)：根据渲染树及回流得到的几何信息，得到节点的绝对像素；</p>\n<p>(5) Display：将像素发送给GPU，展示在页面上（GPU将合成层合并为一个层，并展示在页面中）。</p>\n</li>\n<li>\n<p>浏览器构建渲染树流程：</p>\n<p>(1) 遍历DOM树的某个可见节点；</p>\n<p>(2) 对于每个可见节点，从CSSOM树中找到对应的规则并应用；</p>\n<p>(3) 根据每个可见节点及其对应样式，组合生成渲染树。</p>\n<p><em>备注(不可见节点)：</em></p>\n<ul>\n<li><em>script、link、meta等</em></li>\n<li><em>通过css隐藏的节点。如<code>display: none</code>，visibility和opactity隐藏的节点仍会在渲染树中。</em></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"html-css\"> HTML/CSS</h3>\n<h4 id=\"css3加速原理\"> CSS3加速原理：</h4>\n<h4 id=\"bfc-block-formatting-context\"> BFC(Block Formatting Context)：</h4>\n<h5 id=\"触发bfc的css\"> 触发BFC的CSS：</h5>\n<ul>\n<li>overflow: hidden</li>\n<li>float: left/right</li>\n<li>display: inline-block</li>\n<li>position: absolute/fixed</li>\n<li>display: table-cell/flex/grid</li>\n</ul>\n<h4 id=\"bfc规则\"> BFC规则：</h4>\n<ul>\n<li>\n<p><code>BFC</code>就是一个块级元素，块级元素会在垂直方向一个接一个的排列；</p>\n</li>\n<li>\n<p><code>BFC</code>就是页面中的一个隔离的独立容器，容器里的标签不会影响到外部标签；</p>\n</li>\n<li>\n<p>垂直方向的距离由margin决定， 属于同一个<code>BFC</code>的两个相邻的标签外边距会发生重叠；</p>\n</li>\n<li>\n<p>计算<code>BFC</code>的高度时，浮动元素也参与计算。</p>\n</li>\n</ul>\n<h4 id=\"bfc解决问题\"> BFC解决问题：</h4>\n<ul>\n<li>使用float脱离文档流，高度塌陷；</li>\n<li>margin边距重叠；</li>\n<li>两栏布局问题。</li>\n</ul>\n<h3 id=\"js\"> JS</h3>\n<ol>\n<li>ES6模块和CommonJs的区别：</li>\n</ol>\n<h3 id=\"react\"> React</h3>\n<ol>\n<li>virtual dom：react中render方法得到的并不是真实的dom节点，而是保存于内存中的js对象。\n<ul>\n<li>抽象了渲染过程，使得可以更好地实现跨平台。</li>\n<li>初次渲染比较慢，因为中间需要计算虚拟节点树。</li>\n<li>对于节点比较少的页面，频繁的更新节点使用虚拟dom效率反而不高。</li>\n</ul>\n</li>\n<li>diff算法：\n<ul>\n<li>提升界面渲染的速度和性能，计算出真正改变的节点，不需要重新渲染整个页面</li>\n<li>三大算法：\n<ul>\n<li>tree diff：节点树之间的比较，只比较同层级的节点。对于跨层级的节点移动，在react中只会有创建和、删除的操作。比如A节点有B、C两个叶子节点，新的节点树变成了A节点的子节点只有B，而B节点在子节点是C。此时react有两个操作：<code>删除A节点下的C节点</code>和<code>在B节点下创建C节点</code>。(一般不建议这么做)</li>\n<li>component diff：如果是同一类组件，那么继续按照同层级的比较(用户可以通过<code>shouldComponentUpdate()</code>的方法来决定是否继续进行比较)，如果不是同类型的组件，那么就替换整个组件下的所有子节点。</li>\n<li>element diff：react对于同层级的节点的更新提供了创建、删除、移动三种操作，通过节点的key和diff来判断新老节点。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ref：操作原生js的一个桥梁/通道。</li>\n<li>ErrorBoundary：作用类似于try catch，主要是为了防止js执行错误时页面白屏，当js报错时可以跳转到预留的页面，当然，怎么处理报错可以工具自己需求调整。</li>\n</ol>\n<h3 id=\"手写函数\"> 手写函数</h3>\n<h4 id=\"debounce\"> Debounce</h4>\n<div><pre><code><span>const</span> <span>debounce</span> <span>=</span> <span>(</span><span>func<span>,</span> ms</span><span>)</span> <span>=></span> <span>{</span>\n  <span>let</span> timer <span>=</span> <span>null</span><span>;</span>\n  <span>return</span> <span>function</span> <span>(</span><span><span>...</span>rest</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>timer<span>)</span> <span>{</span>\n      <span>clearTimeout</span><span>(</span>timer<span>)</span><span>;</span>\n    <span>}</span>\n    timer <span>=</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>func</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> rest<span>)</span><span>;</span>\n    <span>}</span><span>,</span> ms<span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id=\"throttle\"> Throttle</h4>\n<div><pre><code><span>// 方式1</span>\n<span>const</span> <span>throttle</span> <span>=</span> <span>(</span><span>func<span>,</span> ms</span><span>)</span> <span>=></span> <span>{</span>\n  <span>let</span> timestamp <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span>\n  <span>return</span> <span>function</span> <span>(</span><span><span>...</span>rest</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> timestamp <span>&lt;</span> ms<span>)</span> <span>{</span>\n      <span>return</span><span>;</span>\n    <span>}</span>\n    <span>func</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> rest<span>)</span><span>;</span>\n    timestamp <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>// 方式2</span>\n<span>const</span> <span>throttle</span> <span>=</span> <span>(</span><span>func<span>,</span> ms</span><span>)</span> <span>=></span> <span>{</span>\n  <span>let</span> flag <span>=</span> <span>true</span><span>;</span>\n  <span>return</span> <span>function</span> <span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>!</span>flag<span>)</span> <span>return</span><span>;</span>\n    flag <span>=</span> <span>false</span><span>;</span>\n    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>func</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span><span>;</span>\n      flag <span>=</span> <span>true</span><span>;</span>\n    <span>}</span><span>,</span> ms<span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h4 id=\"函数柯里化\"> 函数柯里化</h4>\n<div><pre><code><span>const</span> <span>curry</span> <span>=</span> <span>func</span> <span>=></span> <span>{</span>\n  <span>return</span> <span>function</span> <span>curried</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>\n    <span>// 当实参数量大于/等于func定义的形参</span>\n    <span>if</span> <span>(</span>args<span>.</span>length <span>>=</span> func<span>.</span>length<span>)</span> <span>{</span>\n      <span>return</span> <span>func</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span><span>;</span>\n    <span>}</span>\n    <span>return</span> <span>function</span> <span>(</span><span><span>...</span>args2</span><span>)</span> <span>{</span>\n      <span>return</span> <span>curried</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>.</span><span>concat</span><span>(</span>args2<span>)</span><span>)</span><span>;</span>\n    <span>}</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id=\"深拷贝\"> 深拷贝</h4>\n<div><pre><code><span>const</span> <span>deepClone</span> <span>=</span> <span>target</span> <span>=></span> <span>{</span>\n  <span>if</span> <span>(</span><span>typeof</span> target <span>!==</span> <span>'object'</span><span>)</span> <span>{</span>\n    <span>return</span> target<span>;</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>Array<span>.</span><span>isArray</span><span>(</span>target<span>)</span><span>)</span> <span>{</span>\n    <span>const</span> arr <span>=</span> <span>[</span><span>]</span><span>;</span>\n    target<span>.</span><span>forEach</span><span>(</span><span>el</span> <span>=></span> <span>{</span>\n      <span>if</span> <span>(</span><span>typeof</span> el <span>!==</span> <span>'object'</span><span>)</span> <span>{</span>\n        arr<span>.</span><span>push</span><span>(</span>el<span>)</span><span>;</span>\n      <span>}</span> <span>else</span> <span>{</span>\n        arr<span>.</span><span>push</span><span>(</span><span>deepClone</span><span>(</span>el<span>)</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span><span>)</span><span>;</span>\n    <span>return</span> arr<span>;</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>target <span>instanceof</span> <span>RegExp</span><span>)</span> <span>{</span>\n    <span>return</span> <span>new</span> <span>RegExp</span><span>(</span>target<span>.</span>source<span>,</span> target<span>.</span>flags<span>)</span><span>;</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>target <span>instanceof</span> <span>Date</span><span>)</span> <span>{</span>\n    <span>return</span> <span>new</span> <span>Date</span><span>(</span>target<span>)</span><span>;</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>target <span>instanceof</span> <span>Function</span><span>)</span> <span>{</span>\n    <span>return</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n      <span>return</span> <span>target</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span><span>;</span>\n    <span>}</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>const</span> obj <span>=</span> <span>{</span><span>}</span><span>;</span>\n    Object<span>.</span><span>keys</span><span>(</span>target<span>)</span><span>.</span><span>forEach</span><span>(</span><span>key</span> <span>=></span> <span>{</span>\n      <span>if</span> <span>(</span><span>typeof</span> target<span>[</span>key<span>]</span> <span>!==</span> <span>'object'</span><span>)</span> <span>{</span>\n        obj<span>[</span>key<span>]</span> <span>=</span> target<span>[</span>key<span>]</span><span>;</span>\n      <span>}</span> <span>else</span> <span>{</span>\n        obj<span>[</span>key<span>]</span> <span>=</span> <span>deepClone</span><span>(</span>target<span>[</span>key<span>]</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span><span>)</span><span>;</span>\n    <span>return</span> obj<span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h4 id=\"数组扁平化\"> 数组扁平化</h4>\n<div><pre><code><span>const</span> <span>arrayFlatten</span> <span>=</span> <span>arr</span> <span>=></span> <span>{</span>\n  <span>const</span> newArr <span>=</span> <span>[</span><span>]</span><span>;</span>\n  arr<span>.</span><span>forEach</span><span>(</span><span>el</span> <span>=></span> <span>{</span>\n    <span>if</span> <span>(</span>Array<span>.</span><span>isArray</span><span>(</span>el<span>)</span><span>)</span> <span>{</span>\n      newArr<span>.</span><span>push</span><span>(</span><span>...</span><span>arrayFlatten</span><span>(</span>el<span>)</span><span>)</span><span>;</span>\n    <span>}</span> <span>else</span> <span>{</span>\n      newArr<span>.</span><span>push</span><span>(</span>el<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span><span>)</span><span>;</span>\n  <span>return</span> newArr<span>;</span>\n<span>}</span><span>;</span>\n\n<span>// [1, [2, [3]]] => [1, 2, 3]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h4 id=\"对象扁平化\"> 对象扁平化</h4>\n<div><pre><code><span>const</span> objectFlatten <span>=</span> <span>(</span>obj<span>,</span> key <span>=</span> <span>''</span><span>,</span> newObj <span>=</span> <span>{</span><span>}</span><span>)</span> <span>=></span> <span>{</span>\n  Object<span>.</span><span>keys</span><span>(</span>obj<span>)</span><span>.</span><span>forEach</span><span>(</span><span>k</span> <span>=></span> <span>{</span>\n    <span>if</span> <span>(</span><span>typeof</span> obj<span>[</span>k<span>]</span> <span>!==</span> <span>'object'</span><span>)</span> <span>{</span>\n      newObj<span>[</span><span><span>`</span><span><span>${</span>key<span>}</span></span><span><span>${</span>k<span>}</span></span><span>`</span></span><span>]</span> <span>=</span> obj<span>[</span>k<span>]</span><span>;</span>\n    <span>}</span> <span>else</span> <span>if</span> <span>(</span>Array<span>.</span><span>isArray</span><span>(</span>obj<span>[</span>k<span>]</span><span>)</span><span>)</span> <span>{</span>\n      obj<span>[</span>k<span>]</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>el<span>,</span> i</span><span>)</span> <span>=></span> <span>{</span>\n        <span>if</span> <span>(</span><span>typeof</span> el <span>!==</span> <span>'object'</span><span>)</span> <span>{</span>\n          newObj<span>[</span><span><span>`</span><span><span>${</span>key<span>}</span></span><span><span>${</span>k<span>}</span></span><span>[</span><span><span>${</span>i<span>}</span></span><span>]</span><span>`</span></span><span>]</span> <span>=</span> obj<span>[</span>k<span>]</span><span>[</span>i<span>]</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n          <span>objectFlatten</span><span>(</span>el<span>,</span> <span><span>`</span><span><span>${</span>key<span>}</span></span><span><span>${</span>k<span>}</span></span><span>.</span><span>`</span></span><span>,</span> newObj<span>)</span><span>;</span>\n        <span>}</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span> <span>else</span> <span>{</span>\n      <span>objectFlatten</span><span>(</span>obj<span>[</span>k<span>]</span><span>,</span> <span><span>`</span><span><span>${</span>key<span>}</span></span><span><span>${</span>k<span>}</span></span><span>.</span><span>`</span></span><span>,</span> newObj<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span><span>)</span><span>;</span>\n  <span>return</span> newObj<span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h4 id=\"对象反扁平化\"> 对象反扁平化</h4>\n<div><pre><code><span>const</span> <span>reverseObjectFlatten</span> <span>=</span> <span>(</span><span>obj<span>,</span> newObj <span>=</span> <span>{</span><span>}</span></span><span>)</span> <span>=></span> <span>{</span>\n  Object<span>.</span><span>keys</span><span>(</span>obj<span>)</span><span>.</span><span>forEach</span><span>(</span><span>el</span> <span>=></span> <span>{</span>\n    <span>const</span> keys <span>=</span> el<span>.</span><span>split</span><span>(</span><span>'.'</span><span>)</span><span>;</span>\n    <span>let</span> temp <span>=</span> newObj<span>;</span>\n    <span>const</span> cur <span>=</span> temp<span>;</span>\n    keys<span>.</span><span>forEach</span><span>(</span><span>(</span><span>key<span>,</span> i</span><span>)</span> <span>=></span> <span>{</span>\n      <span>const</span> match <span>=</span> key<span>.</span><span>match</span><span>(</span><span><span>/</span><span>.+(?=(\\[[0-9]+\\])$)</span><span>/</span></span><span>)</span><span>;</span>\n      <span>if</span> <span>(</span>match<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>!</span>temp<span>[</span>match<span>[</span><span>0</span><span>]</span><span>]</span><span>)</span> <span>{</span>\n          temp<span>[</span>match<span>[</span><span>0</span><span>]</span><span>]</span> <span>=</span> <span>[</span><span>]</span><span>;</span>\n        <span>}</span>\n        <span>const</span> index <span>=</span> <span>parseInt</span><span>(</span>match<span>[</span><span>1</span><span>]</span><span>[</span><span>1</span><span>]</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>i <span>===</span> keys<span>.</span>length <span>-</span> <span>1</span><span>)</span> <span>{</span>\n          temp<span>[</span>match<span>[</span><span>0</span><span>]</span><span>]</span><span>[</span>index<span>]</span> <span>=</span> obj<span>[</span>el<span>]</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n          temp<span>[</span>match<span>[</span><span>0</span><span>]</span><span>]</span><span>[</span>index<span>]</span> <span>=</span> <span>{</span><span>}</span><span>;</span>\n        <span>}</span>\n        temp <span>=</span> temp<span>[</span>match<span>[</span><span>0</span><span>]</span><span>]</span><span>[</span>index<span>]</span><span>;</span>\n      <span>}</span> <span>else</span> <span>{</span>\n        <span>if</span> <span>(</span>i <span>===</span> keys<span>.</span>length <span>-</span> <span>1</span><span>)</span> <span>{</span>\n          temp<span>[</span>key<span>]</span> <span>=</span> obj<span>[</span>el<span>]</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n          <span>if</span> <span>(</span><span>!</span>temp<span>[</span>key<span>]</span><span>)</span> <span>{</span>\n            temp<span>[</span>key<span>]</span> <span>=</span> <span>{</span><span>}</span><span>;</span>\n          <span>}</span>\n          temp <span>=</span> temp<span>[</span>key<span>]</span><span>;</span>\n        <span>}</span>\n      <span>}</span>\n    <span>}</span><span>)</span><span>;</span>\n    Object<span>.</span><span>assign</span><span>(</span>newObj<span>,</span> cur<span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n  <span>return</span> newObj<span>;</span>\n<span>}</span><span>;</span>\n\n<span>// { a: 1, 'b.c': 3, 'b.arr[0].d': 1, 'b.arr[1]': 2 } </span>\n<span>// => { a: 1, b: { c: 3, arr: [ {d: 1}, 2 ] } }</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><h4 id=\"发布订阅\"> 发布订阅</h4>\n<div><pre><code><span>class</span> <span>EventEmitter</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>callback <span>=</span> <span>{</span><span>}</span><span>;</span>\n    <span>this</span><span>.</span>curId <span>=</span> <span>0</span><span>;</span>\n  <span>}</span>\n\n  <span>subscribe</span><span>(</span><span>name<span>,</span> cb<span>,</span> once <span>=</span> <span>false</span></span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>callback<span>[</span>name<span>]</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>callback<span>[</span>name<span>]</span> <span>=</span> <span>[</span><span>]</span><span>;</span>\n    <span>}</span>\n    <span>this</span><span>.</span>callback<span>[</span>name<span>]</span><span>.</span><span>push</span><span>(</span><span>{</span> id<span>:</span> <span>this</span><span>.</span>curId<span>++</span><span>,</span> once<span>,</span> cb <span>}</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>once</span><span>(</span><span>name<span>,</span> cb</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span><span>subscribe</span><span>(</span>name<span>,</span> cb<span>,</span> <span>true</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>notify</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>this</span><span>.</span>callback<span>[</span>name<span>]</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>callback<span>[</span>name<span>]</span><span>.</span><span>forEach</span><span>(</span><span>item</span> <span>=></span> <span>{</span>\n        item<span>.</span><span>cb</span><span>(</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>item<span>.</span>once<span>)</span> <span>{</span>\n          <span>this</span><span>.</span><span>cancel</span><span>(</span>name<span>,</span> item<span>.</span>id<span>)</span><span>;</span>\n        <span>}</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span>cancel</span><span>(</span><span>name<span>,</span> id</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>this</span><span>.</span>callback<span>[</span>name<span>]</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>callback<span>[</span>name<span>]</span> <span>=</span> <span>this</span><span>.</span>callback<span>[</span>name<span>]</span><span>.</span><span>filter</span><span>(</span><span>item</span> <span>=></span> item<span>.</span>id <span>!==</span> id<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h4 id=\"图片懒加载\"> 图片懒加载</h4>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>\"</span>en<span>\"</span></span><span>></span></span>\n\n  <span><span><span>&lt;</span>head</span><span>></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>\"</span>UTF-8<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>\"</span>X-UA-Compatible<span>\"</span></span> <span>content</span><span><span>=</span><span>\"</span>IE=edge<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>\"</span>viewport<span>\"</span></span> <span>content</span><span><span>=</span><span>\"</span>width=device-width, initial-scale=1.0<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>title</span><span>></span></span>图片懒加载<span><span><span>&lt;/</span>title</span><span>></span></span>\n    <span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n      <span>.image-container</span> <span>{</span>\n        <span>overflow</span><span>:</span> scroll<span>;</span>\n        <span>width</span><span>:</span> 90vh<span>;</span>\n        <span>height</span><span>:</span> 100vh<span>;</span>\n        <span>margin-left</span><span>:</span> 50%<span>;</span>\n        <span>transform</span><span>:</span> <span>translateX</span><span>(</span>-50%<span>)</span><span>;</span>\n        <span>background-color</span><span>:</span> azure<span>;</span>\n      <span>}</span>\n\n      <span>.img</span> <span>{</span>\n        <span>width</span><span>:</span> 100%<span>;</span>\n        <span>height</span><span>:</span> 25%<span>;</span>\n      <span>}</span>\n    </span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n  <span><span><span>&lt;/</span>head</span><span>></span></span>\n\n  <span><span><span>&lt;</span>body</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>image-container<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>img</span> <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span> <span>data-src</span><span><span>=</span><span>\"</span>./images/1.jpg<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>img</span> <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span> <span>data-src</span><span><span>=</span><span>\"</span>./images/2.jpg<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>img</span> <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span> <span>data-src</span><span><span>=</span><span>\"</span>./images/3.jpg<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>img</span> <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span> <span>data-src</span><span><span>=</span><span>\"</span>./images/4.jpg<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>img</span> <span>class</span><span><span>=</span><span>\"</span>img<span>\"</span></span> <span>data-src</span><span><span>=</span><span>\"</span>./images/5.jpg<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>body</span><span>></span></span>\n\n  <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>const</span> <span>lasyLoad</span> <span>=</span> <span>(</span><span>entries</span><span>)</span> <span>=></span> <span>{</span>\n      entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=></span> <span>{</span>\n        <span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>\n          entry<span>.</span>target<span>.</span>src <span>=</span> entry<span>.</span>target<span>.</span>dataset<span>.</span>src<span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n          entry<span>.</span>target<span>.</span>src <span>=</span> <span>''</span><span>;</span>\n        <span>}</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>const</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>lasyLoad<span>,</span> <span>{</span>\n      threshold<span>:</span> <span>0</span><span>,</span>  <span>// 阈值，父子元素交集大小超过该值就会执行回调函数，默认为0</span>\n    <span>}</span><span>)</span><span>;</span>\n\n    <span>const</span> imgs <span>=</span> document<span>.</span><span>getElementsByClassName</span><span>(</span><span>'img'</span><span>)</span>\n    <span>for</span> <span>(</span><span>let</span> el <span>of</span> imgs<span>)</span> <span>{</span>\n      observer<span>.</span><span>observe</span><span>(</span>el<span>)</span>\n    <span>}</span>\n  </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br></div></div>",
      "date_modified": "2022-05-11T16:27:22.843Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "面试"
      ]
    },
    {
      "title": "11.23 面试复盘(1h20min)",
      "url": "https://amschen.cn/articles/2021-11-23/11.23%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/",
      "id": "https://amschen.cn/articles/2021-11-23/11.23%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/",
      "content_html": "<h2 id=\"nth-last-child-和-nth-last-of-type-的区别\"> nth-last-child 和 nth-last-of-type 的区别</h2>\n<h3 id=\"nth-last-child\"> nth-last-child</h3>\n<div><p>摘自 MDN</p>\n<p>从兄弟节点中从后往前匹配处于某些位置的元素</p>\n</div>\n<h3 id=\"nth-last-of-type\"> nth-last-of-type</h3>\n<div><p>自己的理解</p>\n<p>从兄弟节点中从后往前匹配处于某些位置相同类型的元素</p>\n</div>\n<p>例子</p>\n<div><pre><code><span><span><span>&lt;</span>html</span><span>></span></span>\n  <span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n    <span>p:nth-last-child(1)</span> <span>{</span>\n      <span>color</span><span>:</span> red<span>;</span>\n    <span>}</span>\n    <span>p:nth-last-of-type(1)</span> <span>{</span>\n      <span>color</span><span>:</span> aquamarine<span>;</span>\n    <span>}</span>\n  </span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n  <span><span><span>&lt;</span>body</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>p</span><span>></span></span>p1元素<span><span><span>&lt;/</span>p</span><span>></span></span>\n      <span><span><span>&lt;</span>p</span><span>></span></span>p2元素<span><span><span>&lt;/</span>p</span><span>></span></span>\n      <span><span><span>&lt;</span>p</span><span>></span></span>p3元素<span><span><span>&lt;/</span>p</span><span>></span></span>\n      <span><span><span>&lt;</span>span</span><span>></span></span>span元素<span><span><span>&lt;/</span>span</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p><img src=\"./images/nth1.png\" alt=\"image\" /></p>\n<p>从上面的图可以看出，<code>nth-last-child(1)</code> 并没有匹配，为什么呢？</p>\n<p>进一步阐述这个选择器的含义：p 的父元素下的 p 元素 且 p 元素是倒数第 1 个子元素(如果不符合这个要求，则认为没匹配到)。</p>\n<p>在上面的例子中，最后一个子元素是 span 而不是 p，故该选择器不生效。</p>\n<p>那为什么<code>nth-last-of-type(1)</code>生效呢？</p>\n<p>原因是 p 的父元素下的倒数第 1 个 p 元素，这个计数只会统计相同类型的，而上面的例子中 p 元素 p3 就是同级所有 p 元素的最后一个，所以可以匹配到。</p>\n<p>下面这个例子应该可以更好地看出区别</p>\n<div><pre><code><span>p:nth-last-child(2)</span> <span>{</span>\n  <span>color</span><span>:</span> red<span>;</span>\n<span>}</span>\n<span>p:nth-last-of-type(2)</span> <span>{</span>\n  <span>color</span><span>:</span> aquamarine<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><img src=\"./images/nth2.png\" alt=\"image\" /></p>\n<p>由于 p 的兄弟节点中，p3 属性倒数第二个元素，且是 p 元素，所以<code>nth-last-child(2)</code>匹配到 p3，而 p2 在所有的同级 p 元素中属于倒数第二个，所以<code>nth-last-of-type(2)</code>匹配到 p2。</p>\n<h2 id=\"原型相关\"> 原型相关</h2>\n<p>两种方式创建的空对象的区别？</p>\n<div><pre><code><span>var</span> obj1 <span>=</span> <span>{</span><span>}</span><span>;</span>\n<span>var</span> obj2 <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>null</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>第一种方式创建的对象会继承 Object 的原型链，也就是说 Object 上的方法和属性 obj1 也可以调用，也就是说{}是一个不完全空对象，原型链上还有 Object，而第二种方式创建的对象就真的是一个完全空对象，原型链上什么都没有(null 是原型链上的终点)，</p>\n<p>因此，下面代码<code>obj2.toString()</code>会报错，因为 obj2 上的原型没有 toString 方法。</p>\n<div><pre><code>console<span>.</span><span>log</span><span>(</span>obj1<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// {}</span>\n<span>//VS</span>\nconsole<span>.</span><span>log</span><span>(</span>obj2<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// 报错</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"语义化是什么\"> 语义化是什么？</h2>\n<p>在 html 中，我理解的语义化就是让标签变得有含义，让文档的“可读性”更高。</p>\n<p>掘金找到的一张图</p>\n<p><img src=\"./images/语义化.png\" alt=\"语义化\" /></p>\n<h3 id=\"header-和-div-的区别\"> header 和 div 的区别</h3>\n<p>header 元素代表“网页”或“section”的页眉。\n通常包含 h1-h6 元素或 hgroup，作为整个页面或者一个内容块的标题。</p>\n<h3 id=\"section-和-div-的区别\"> section 和 div 的区别</h3>\n<p>section 元素代表文档中的“节”或“段”，“段”可以是指一篇文章里按照主题的分段；“节”可以是指一个页面里的分组。</p>\n<h3 id=\"figure-和-article-的区别\"> figure 和 article 的区别</h3>\n<div><p>摘自 w3c</p>\n<p><code>&lt;figure&gt;</code> 标签规定独立的流内容（图像、图表、照片、代码等等）。</p>\n<p><code>figure</code> 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。</p>\n</div>\n<div><p>摘自 w3c</p>\n<p><code>&lt;article&gt;</code> 标签规定独立的自包含内容。\n一篇文章应有其自身的意义，应该有可能独立于站点的其余部分对其进行分发。\n<code>&lt;article&gt;</code> 元素的潜在来源：</p>\n<ul>\n<li>论坛帖子</li>\n<li>报纸文章</li>\n<li>博客条目</li>\n<li>用户评论</li>\n</ul>\n</div>\n<h3 id=\"div\"> div</h3>\n<p>div 本身没有语义，作为一个普通容器使用。</p>\n<h2 id=\"原型链是什么\"> 原型链是什么？</h2>\n<div><p>摘自 MDN</p>\n<p>JavaScript 只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（prototype）。该原型对象也有一个自己的原型对象（<strong>proto</strong>），层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。\n几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。</p>\n</div>\n<p>题目：</p>\n<div><pre><code><span>let</span> Person <span>=</span> <span>{</span>\n  name<span>:</span> <span>'aaa'</span><span>,</span>\n  address<span>:</span> <span>{</span>\n    province<span>:</span> <span>'广东省'</span>\n    city<span>:</span> <span>'深圳市'</span>\n  <span>}</span>\n<span>}</span>\n<span>let</span> p1 <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>)</span><span>;</span>\n<span>let</span> p2 <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>)</span><span>;</span>\n\np1<span>.</span>name <span>=</span> <span>'tranvce'</span><span>;</span>\np1<span>.</span>address<span>.</span>province <span>=</span> <span>'云南省'</span><span>;</span>\n\nconsole<span>.</span><span>log</span><span>(</span>p1<span>.</span>name<span>)</span><span>;</span>  <span>// tranvce</span>\nconsole<span>.</span><span>log</span><span>(</span>p2<span>.</span>name<span>)</span><span>;</span>  <span>// aaa</span>\nconsole<span>.</span><span>log</span><span>(</span>p2<span>.</span>address<span>.</span>province<span>)</span><span>;</span>  <span>// 云南省</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>输出是什么，为什么？</p>\n<p><code>p1.name = 'tranvce'</code>这里访问的是简单属性，并不会访问到 Person 的原型上，因此也不会修改到 Person 的原型属性，而<code>p1.address.province = '云南省'</code>访问的复杂属性，因此会沿着原型寻找到 province，这样 Person 原型上的属性就被修改了，然后 p1 和 p2 共享 Person 的原型，因此 p1 对 Person 原型的修改会影响到 p2。</p>\n<p>其实逆过来想也可以，如果<code>p1.address.province</code>没有访问到 Person 的原型，它本身也没有这个属性，那么在访问 province 的时候就会报<code>Cannot read property 'province' of undefined</code>的错误了。</p>\n<p>但是还是不是很明白这个简单属性和复杂属性访问的原理，<code>p1.name = xxx</code> 是不是相当于在构造函数里使用<code>this.name = xxx</code>呢。</p>\n<p>发现面试官给的代码报错了，<code>Person is not a constructor</code>😢</p>\n<h2 id=\"冒泡是什么-什么时候停止-捕获呢\"> 冒泡是什么，什么时候停止，捕获呢？</h2>\n<h3 id=\"起源\"> 起源</h3>\n<p>Netscape（网景）只使用事件捕获，而 Internet Explorer 只使用事件冒泡。当 W3C 决定尝试规范这些行为并达成共识时，他们最终得到了包括这两种情况（捕捉和冒泡）的系统，最终被应用在现在浏览器里。</p>\n<h2 id=\"捕获\"> 捕获</h2>\n<ul>\n<li>浏览器检查元素的最外层祖先<code>&lt;html&gt;</code>，是否在捕获阶段中注册了一个 onclick 事件处理程序，如果是，则运行它。</li>\n<li>然后，它移动到<code>&lt;html&gt;</code>中单击元素的下一个祖先元素，并执行相同的操作，然后是单击元素再下一个祖先元素，依此类推，直到到达实际点击的元素。</li>\n</ul>\n<h3 id=\"冒泡\"> 冒泡</h3>\n<ul>\n<li>浏览器检查实际点击的元素是否在冒泡阶段中注册了一个 onclick 事件处理程序，如果是，则运行它</li>\n<li>然后它移动到下一个直接的祖先元素，并做同样的事情，然后是下一个，等等，直到它到达<code>&lt;html&gt;</code>元素。</li>\n</ul>\n<p><code>stopPropagation()</code>可以阻止冒泡。</p>\n<h2 id=\"两者执行顺序\"> 两者执行顺序</h2>\n<p>捕获-目标-冒泡</p>\n<p>好的又答错了。。。凉</p>\n<h2 id=\"http-2\"> HTTP/2</h2>\n<h3 id=\"多路复用的实现\"> 多路复用的实现</h3>\n<p>HTTP/2 设计是基于“二进制帧”进行设计的，帧的字节中保存了不同的信息，前 9 个字节对于每个帧都是一致的，“服务器”解析 HTTP/2 的数据帧时只需要解析这些字节，就能准确的知道整个帧期望多少字节数来进行处理信息。由于 HTTP/2 是分帧的，请求和响应可以交错甚至可以复用。</p>\n<p>HTTP/2 是使用流进行传输的，“流”的概念：HTTP/2 连接上独立的、双向的帧序列交换。流 ID（帧首部的 6-9 字节）用来标识帧所属的流。</p>\n<p><img src=\"./images/多路复用.jpg\" alt=\"image\" /></p>\n<p>延伸问题：为什么 HTTP/1.1 不能实现“多路复用”？</p>\n<ul>\n<li>HTTP/2 是基于二进制“帧”的协议，HTTP/1.1 是基于“文本分割”解析的协议。</li>\n<li>HTTP/1.1 发送请求消息的文本格式：以换行符分割每一条 key:value 的内容，这种以分隔符分割消息的数据，在完成之前不能停止解析，所以一次只能响应一种请求。</li>\n</ul>\n<h3 id=\"管道机制是什么-和非管道运算的区别\"> 管道机制是什么？和非管道运算的区别</h3>\n<p>HTTP/1.1 版引入了管道机制（pipelining），即在同一个 TCP 连接里面，客户端可以同时发送多个请求。</p>\n<p>非管道传输的做法是在同一个 TCP 上面，进行串行的 HTTP 请求，就是说 A 请求发起，等待到服务器响应后，才发起 B 请求。\n而管道传输允许 HTTP 同时发起请求，B 发起请求不需要等待 A 收到响应，但是响应还是按顺序返回，因此存在线头阻塞的问题，就是比如 A 请求非常耗时，那么 A 后面的请求想要得到响应也需要等待很久。</p>\n<h3 id=\"管道机制怎么实现\"> 管道机制怎么实现</h3>\n<p>将多个 HTTP 请求打包到一个 TCP 消息包中。</p>\n<h2 id=\"webpack-场景问题\"> webpack 场景问题</h2>\n<p>真不熟，我尽力了。。</p>\n<h2 id=\"做题\"> 做题</h2>\n<h3 id=\"找出数组重复元素\"> 找出数组重复元素</h3>\n<div><pre><code>input: [3, 1, 2, 3, 1, 4, 4, 5];\noutput: [1, 3, 4];\n返回结果不需要按顺序;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>写完了，结果也没问题，我的思路是：遍历数组，通过哈希表存储出现过的数组，如果数组元素第二次出现，那么哈希表肯定存在这种元素，这时候将该元素 push 到结果数组里。最后通过<code>Array.from(new Set(res))</code>对象进行数组去重即可。</p>\n<h3 id=\"力扣-1047-删除字符串中的所有相邻重复项\"> 力扣 1047. 删除字符串中的所有相邻重复项</h3>\n<div><pre><code>输入：&quot;abbaca&quot;\n输出：&quot;ca&quot;\n解释：\n例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>结果不符合预期，思路方向应该是对的，面试时间有点长了，就没给调试时间。</p>\n<h2 id=\"总结\"> 总结</h2>\n<p>面试真是发现自己不足的最佳途径，就是越面越没信心了 😢，这次可能凉了？</p>\n",
      "date_modified": "2022-05-11T16:27:22.854Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "面试"
      ]
    },
    {
      "title": "11.17 面试复盘(60min)",
      "url": "https://amschen.cn/articles/2021-11-17/11.17%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/",
      "id": "https://amschen.cn/articles/2021-11-17/11.17%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/",
      "content_html": "<h2 id=\"值引用、对象引用和包装引用\"> 值引用、对象引用和包装引用</h2>\n<p>被问到的时候完全懵了，脑海里“检索不到”相关的知识，面试完之后，好像又想起来了。。感觉 C++白学了</p>\n<h3 id=\"值引用\"> 值引用</h3>\n<p>就是最普通的形参，函数传进来的参数是像 number、boolean 这种非引用类型的变量，即使在函数内部改变参数值也不会改变原来变量的值</p>\n<div><pre><code><span>let</span> a <span>=</span> <span>1</span><span>;</span>\n<span>function</span> <span>change</span><span>(</span><span>b</span><span>)</span> <span>{</span>\n  b <span>=</span> <span>10</span><span>;</span>\n<span>}</span>\n<span>change</span><span>(</span>b<span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>a<span>)</span><span>;</span> <span>// 1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"对象引用\"> 对象引用</h3>\n<p>就是说函数的参数如果传进来是一个对象的话，那么在函数内部改变的传进来的这个对象内部属性的时候，外部的对象也会随之改变</p>\n<p>什么意思呢，就是说传进来的对象并不是新的对象，指向的地址没有改变，有点像浅拷贝？</p>\n<p>下面这个例子就是对象引用</p>\n<div><pre><code><span>let</span> o <span>=</span> <span>{</span>\n  a<span>:</span> <span>1</span><span>,</span>\n<span>}</span><span>;</span>\n<span>function</span> <span>change</span><span>(</span><span>obj</span><span>)</span> <span>{</span>\n  obj<span>.</span>a <span>=</span> <span>2</span><span>;</span>\n<span>}</span>\n<span>change</span><span>(</span>o<span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>o<span>.</span>a<span>)</span><span>;</span> <span>// 2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"包装引用\"> 包装引用</h3>\n<p>包装类型自动创建原始值的对应对象，在其内部封装了一些方法，所以它也是属于引用类型的一种，但是和普通的引用对象不一样的是它的生存期不同。</p>\n<div><p>摘自思否</p>\n<p>对于引用类型的数据，在执行流离开当前作用域之前都会保存在内存中，而对于自动创建的基本包装类型的对象，只存在于一行代码的执行瞬间，执行完毕就会立即被销毁。</p>\n</div>\n<p>所以下面的例子是不会改变滴~~虽然但是，其实还没有特别理解这个，暂作保留 😁</p>\n<div><pre><code><span>let</span> num <span>=</span> <span>new</span> <span>Number</span><span>(</span><span>1</span><span>)</span><span>;</span>\n<span>function</span> <span>change</span><span>(</span><span>n</span><span>)</span> <span>{</span>\n  n <span>=</span> <span>10</span><span>;</span>\n<span>}</span>\n<span>change</span><span>(</span>num<span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>num<span>)</span><span>;</span> <span>// [Number: 1]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"typeof-和-instanceof\"> typeof 和 instanceof</h2>\n<p>typeof 是用于判断数据类型的，js 分为基本数据类型和引用类型，虽然知道 null 是引用类型，但是当时想着它是属于基本数据类型，应该也能判断出来 😢，然而不是。</p>\n<p>instanceof 用于判断引用类型，根据对象的原形链往上找，如果原形链上有右边对象的原型，返回 true，否则返回 false。\n比如 A instanceof B，只要 B 的原型对象出现在 A 的原型链中就返回 true。</p>\n<h2 id=\"position\"> position</h2>\n<p>我以为自己已经掌握了它，没想到被问深一点点就自闭了。\n虽然给了提示还是答错，卒。。。。</p>\n<p>主要是 <code>relative</code> 和 <code>absolute</code> 相对于谁定位的知识有点混乱了。</p>\n<h3 id=\"relative\"> relative</h3>\n<p>相对于自身在正常流中的位置进行定位，不脱离文档流。</p>\n<h3 id=\"absolute\"> absolute</h3>\n<p>相对于最近的一个祖先进行定位，该祖先满足：position 的值是非 static 以外的值，若没有这样的祖先则相对于 <code>body</code> 进行定位，偏移值由其 <code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code> 值确定，元素脱离文档流。</p>\n<h3 id=\"fixed\"> fixed</h3>\n<p>相对于浏览器窗口进行定位，这个还行，没有答错</p>\n<h3 id=\"static\"> static</h3>\n<p>默认值，意思是没有定位，正常文档流，本身不能被继承。忽略 <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> 或者 <code>z-index</code> 声明。</p>\n<h3 id=\"sticky\"> sticky</h3>\n<p>粘性定位，基于用户的滚动位置来定位。</p>\n<p>它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。</p>\n<p>元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p>\n<p>缺点：兼容性，Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix。</p>\n<h3 id=\"inherit\"> inherit</h3>\n<p>踩大坑了这个，之前在浏览器看元素的 css 时经常看到 <code>position: inherit</code> 这个样式，以为就是默认值。。原来不是，错得好离谱。</p>\n<p>但 position 设置为这个值时，规定应该从父元素继承 position 属性的值。</p>\n<h2 id=\"option-请求\"> option 请求</h2>\n<p>周末刚看了这个请求的主要，面试时没完全想起来，面试完之后就想起来了(人间真实。。。</p>\n<p>option 主要是一个预检的作用，探测目标是否有什么约束。比如跨域，浏览器先发送 option 请求询问服务端是否允许跨域，得到跨域允许的返回后在进行正式请求。</p>\n<p>option 也可以用于探测服务端支持那种 HTTP 方法，是否需要携带 cookie。</p>\n<p>另外，option 在简单请求中是没有的，在复杂请求中才会有 option 这种预检的请求方式。</p>\n<h2 id=\"vue-key-的作用-computed-和-watch-的区别\"> vue key 的作用 | computed 和 watch 的区别</h2>\n<p>key 的作用：看面试官的反应，好像我之前的理解不是特别透彻？或者说有偏差。</p>\n<p>computed(依赖改变是否一定更新)：当时没太懂面试官的更新是什么意思，如果是说 computed 监听的那个属性是否会更新，那么答案应该是会，当依赖发生变化的时候一定会重新计算并且更新的。</p>\n<div><p>摘自 Vue 官网</p>\n<p>计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。</p>\n</div>\n<p>做了个小小的试验</p>\n<div><pre><code><span><span><span>&lt;</span>html</span><span>></span></span>\n  <span><span><span>&lt;</span>body</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>div</span><span>></span></span>{{sum}}<span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span><span><span>&lt;</span>input</span> <span>v-model</span><span><span>=</span><span>\"</span>tem<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>change(tem)<span>\"</span></span><span>></span></span>change<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>body</span><span>></span></span>\n\n  <span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://cdn.jsdelivr.net/npm/vue@2<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n  <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>new</span> <span>Vue</span><span>(</span><span>{</span>\n      el<span>:</span> <span>'#app'</span><span>,</span>\n      <span>data</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>{</span>\n          a<span>:</span> <span>1</span><span>,</span>\n          b<span>:</span> <span>1</span><span>,</span>\n          tem<span>:</span> <span>0</span><span>,</span>\n        <span>}</span><span>;</span>\n      <span>}</span><span>,</span>\n      computed<span>:</span> <span>{</span>\n        sum<span>:</span> <span>{</span>\n          <span>get</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n            console<span>.</span><span>log</span><span>(</span><span>'change'</span><span>)</span><span>;</span>\n            <span>return</span> <span>this</span><span>.</span>a <span>+</span> <span>this</span><span>.</span>b<span>;</span>\n          <span>}</span><span>,</span>\n        <span>}</span><span>,</span>\n      <span>}</span><span>,</span>\n      methods<span>:</span> <span>{</span>\n        <span>change</span><span>(</span><span>target</span><span>)</span> <span>{</span>\n          console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>a has been changed from </span><span><span>${</span><span>this</span><span>.</span>a<span>}</span></span><span> to </span><span><span>${</span>target<span>}</span></span><span>`</span></span><span>)</span><span>;</span>\n          <span>this</span><span>.</span>a <span>=</span> target<span>;</span>\n        <span>}</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>}</span><span>)</span><span>;</span>\n  </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p><img src=\"./images/computed.png\" alt=\"computed\" /></p>\n<p>还有 computed 是如何实现的？这个是打算和 vue 的响应式原理那块一起学的，奈何腾不出时间，被问到也很无奈</p>\n<p>这块的知识点这里先不搞，和 vue 的相关原理一起冲！</p>\n",
      "date_modified": "2022-05-11T16:27:22.859Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "面试"
      ]
    },
    {
      "title": "浏览器基础",
      "url": "https://amschen.cn/articles/2022-03-06/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/",
      "id": "https://amschen.cn/articles/2022-03-06/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/",
      "content_html": "<h2 id=\"dom\"> DOM</h2>\n<h3 id=\"定义\"> 定义</h3>\n<p>是一个应用编程接口（对网页内容访问和操作的接口），用于在 HTML 中使用扩展的 XML。DOM 将整个页面抽象为一组分层节点。</p>\n<h3 id=\"起源\"> 起源</h3>\n<p>早期微软和网景设计 DHTML 有差异，为了保持 web 的跨平台特性，w3c 着手制定 DOM 标准。</p>\n<h3 id=\"发展历程\"> 发展历程</h3>\n<h4 id=\"dom1\"> DOM1</h4>\n<p>DOM1 由两个模块构成：DOM Core(提供一种映射 XML 文档，从而方便访问和操作文档任意部分的方式) 和 DOM HTML(扩展了前者，\n并增加了特定于 HTML 的对象和方法)。</p>\n",
      "date_modified": "2022-05-11T16:27:22.859Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": [
        "浏览器"
      ]
    },
    {
      "title": "Friends",
      "url": "https://amschen.cn/friends/",
      "id": "https://amschen.cn/friends/",
      "content_html": "<p><span>uu 们的博客</span></p>\n<div>\n  <div>\n    <a href=\"https://dcs.pet/\" target=\"_blank\">\n      <img src=\"https://i.loli.net/2021/09/25/FwOBPk7IQt3ubmi.jpg\"><img>\n      <div>\n        <div>CSJerry的驿站 ✨</div>\n        <div>喜欢像设计程序一样，设计自己的生活。</div>\n      </div>\n    </a>\n  </div>\n  <div>\n    <a href=\"https://jackyu.cn\" target=\"_blank\">\n      <img src=\"https://avatars.githubusercontent.com/u/13096985?v=4\"><img>\n      <div>\n        <div>Jacky’s Blog ✨</div>\n        <div>Jacky’s Blog</div>\n      </div>\n    </a>\n  </div>\n</div>\n<style>\n.container {\n  width: 100%;\n  padding: 0 0 40px;\n  margin-bottom: 40px;\n  box-sizing: border-box;\n  border-bottom: 1px solid #ccc;\n}\n.title {\n  font-size: 20px;\n  font-weight: 700;\n}\n.warp {\n  display: inline-block;\n}\n.friend-link {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  width: 300px;\n  height: 100px;\n  padding: 20px 30px;\n  margin-right: 20px;\n  margin-top: 15px;\n  background: #add1ef;\n  background: -moz-linear-gradient(left, #add1ef 0%, #e7f3ea 100%);\n  background: -webkit-gradient(\n    linear,\n    left,\n    right,\n    color-stop(0%, #add1ef),\n    color-stop(100%, #e7f3ea)\n  );\n  background: -webkit-linear-gradient(left, #add1ef 0%, #e7f3ea 100%);\n  background: -o-linear-gradient(left, #add1ef 0%, #e7f3ea 100%);\n  background: -ms-linear-gradient(left, #add1ef 0%, #e7f3ea 100%);\n  background: linear-gradient(to right, #add1ef 0%, #e7f3ea 100%);\n  background-size: 300% 100%;\n  /* box-shadow: 0 0 2px 1px #255; */\n  border-radius: 10px;\n  box-sizing: border-box;\n  moz-transition: all 0.5s ease-in-out;\n  -o-transition: all 0.5s ease-in-out;\n  -webkit-transition: all 0.5s ease-in-out;\n  transition: all 0.5s ease-in-out;\n  text-decoration: none !important;\n  color: #007acc;\n}\n.friend-link:hover {\n  background-position: 100% 0;\n  moz-transition: all 0.5s ease-in-out;\n  -o-transition: all 0.5s ease-in-out;\n  -webkit-transition: all 0.5s ease-in-out;\n  transition: all 0.5s ease-in-out;\n  background-image: linear-gradient(to right, #add1ef, #9cd7f2, #bdb5da);\n  box-shadow: 0 0px 15px 0 rgba(175, 210, 239, 0.75);\n}\n.avatar {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n}\n.info {\n  margin-left: 20px;\n}\n.name {\n  height: 50%;\n  padding: 5px 0;\n}\n.desc {\n  height: 50%;\n  padding: 5px 0;\n  font-size: 12px;\n}\n.theme-default-content {\n  padding: 10px 1.5rem 0 !important;\n}\n.page-meta {\n  padding: 0;\n}\n</style>\n<div><p>友链申请</p>\n<p>下方输入：</p>\n<p>icon: 图标</p>\n<p>name: 名称</p>\n<p>link: 链接</p>\n<p>desc: 描述</p>\n</div>\n",
      "date_modified": "2022-05-11T16:27:22.861Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": []
    },
    {
      "title": "项目主页",
      "url": "https://amschen.cn/home/",
      "id": "https://amschen.cn/home/",
      "content_html": "<p>这是普通主页的案例。你可以在这里放置你的主体内容。</p>\n<p>想要使用此布局，你需要在页面 front matter 中设置 <code>home: true</code>。</p>\n<p>配置项的相关说明详见 <a href=\"https://vuepress-theme-hope.github.io/zh/guide/layout/home/\" target=\"_blank\" rel=\"noopener noreferrer\">项目主页配置</a>。</p>\n",
      "date_modified": "2022-05-11T16:27:22.861Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": []
    },
    {
      "title": "博客主页",
      "url": "https://amschen.cn/zh/",
      "id": "https://amschen.cn/zh/",
      "content_html": "",
      "date_modified": "2022-05-11T16:27:22.861Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": []
    },
    {
      "title": "项目主页",
      "url": "https://amschen.cn/zh/home/",
      "id": "https://amschen.cn/zh/home/",
      "content_html": "<p>这是普通主页的案例。你可以在这里放置你的主体内容。</p>\n<p>想要使用此布局，你需要在页面 front matter 中设置 <code>home: true</code>。</p>\n<p>配置项的相关说明详见 <a href=\"https://vuepress-theme-hope.github.io/zh/guide/layout/home/\" target=\"_blank\" rel=\"noopener noreferrer\">项目主页配置</a>。</p>\n",
      "date_modified": "2022-05-11T16:27:22.862Z",
      "authors": [
        {
          "name": "AmsChan"
        }
      ],
      "tags": []
    }
  ]
}